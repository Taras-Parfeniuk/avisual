{"version":3,"sources":["view/AppTheme.ts","model/AlgorythmStep.ts","model/sorting/bubble/BubbleSort.ts","model/sorting/merge/MergeSort.ts","view/sorting/ArrayItem.tsx","view/sorting/Array.tsx","view/sorting/Algorythm.tsx","view/sorting/ArraySettings.tsx","view/sorting/Demo.tsx","App.tsx","reportWebVitals.js","index.js"],"names":["AppTheme","createTheme","palette","themePrimary","themeLighterAlt","themeLighter","themeLight","themeTertiary","themeSecondary","themeDarkAlt","themeDark","themeDarker","neutralLighterAlt","neutralLighter","neutralLight","neutralQuaternaryAlt","neutralQuaternary","neutralTertiaryAlt","neutralTertiary","neutralSecondary","neutralPrimaryAlt","neutralPrimary","neutralDark","black","white","AlgorythmStep","func","next","_current","this","BubbleSort","array","compare","_array","_compare","_currentStep","_isDone","_i","_j","_currentOperationNumber","functions","head","current","i","length","createSteps","incrementIndexes","bind","swapElements","executeStep","execute","a","b","name","link","MergeSort","_contextStack","_nextStep","_middle","_right","_left","_leftSubArray","_rightSubArray","_leftMergeIdx","_rightMergeIdx","_mergeIdx","setArrayMiddle","Math","floor","mergeSortLeft","mergeSortRight","restoreContext","saveContext","merge","push","left","right","middle","nextStep","context","pop","slice","mergeNextElement","selection","ArrayItem","height","isHighlighted","isNegative","classNames","className","join","style","Array","max","min","maxHeight","abs","map","item","idx","isSelected","includes","key","AlgorythmView","props","viewId","closeView","isRunning","operationsCount","isFinished","info","items","text","href","iconProps","iconName","farItems","onClick","iconOnly","CommandBar","ProgressIndicator","progressHidden","Label","Icon","ArraySettings","defaultArraySize","updateArray","enabled","Slider","showValue","label","defaultValue","onChange","disabled","React","Component","SortingDemoView","_stepTimerId","state","demoState","algorythms","sourceArray","addAlgorythm","addBubbleSort","addMergeSort","createArray","pause","play","stop","removeAlgorythm","updateSourceArray","setInterval","clearInterval","subMenuProps","canUpdateSourceArray","currentSelection","currentOperationNumber","setState","stateUpdate","copyWithArray","algo","concat","id","splice","size","newArray","unfinished","filter","forEach","val","random","App","initializeIcons","loadTheme","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.2aa7fb6f.chunk.js","sourcesContent":["import { createTheme } from \"@fluentui/react\";\r\n\r\nexport const AppTheme = createTheme({\r\n    palette: {\r\n      themePrimary: '#9a93c7',\r\n      themeLighterAlt: '#fafafd',\r\n      themeLighter: '#edecf6',\r\n      themeLight: '#dedcee',\r\n      themeTertiary: '#bfbbdd',\r\n      themeSecondary: '#a59fce',\r\n      themeDarkAlt: '#8b84b3',\r\n      themeDark: '#757097',\r\n      themeDarker: '#56526f',\r\n      neutralLighterAlt: '#faf9f8',\r\n      neutralLighter: '#f3f2f1',\r\n      neutralLight: '#edebe9',\r\n      neutralQuaternaryAlt: '#e1dfdd',\r\n      neutralQuaternary: '#d0d0d0',\r\n      neutralTertiaryAlt: '#c8c6c4',\r\n      neutralTertiary: '#a19f9d',\r\n      neutralSecondary: '#605e5c',\r\n      neutralPrimaryAlt: '#3b3a39',\r\n      neutralPrimary: '#323130',\r\n      neutralDark: '#201f1e',\r\n      black: '#000000',\r\n      white: '#ffffff',\r\n    }});","export function createSteps(functions: (() => void)[]): AlgorythmStep {\r\n\r\n    const head = new AlgorythmStep(functions[0]);\r\n\r\n    let current = head;\r\n\r\n    for (let i = 1; i < functions.length; i++) {\r\n\r\n        current.next = new AlgorythmStep(functions[i]);\r\n\r\n        current = current.next;\r\n    }\r\n\r\n    current.next = head;\r\n\r\n    return head;\r\n}\r\n\r\nexport class AlgorythmStep {\r\n\r\n    private readonly _current: () => void;\r\n\r\n    constructor(func: () => void, next?: AlgorythmStep) {\r\n\r\n        this.next = next;\r\n        this._current = func;\r\n    }\r\n\r\n    public next?: AlgorythmStep;\r\n\r\n    public execute() {\r\n\r\n        this._current();\r\n    } \r\n}\r\n","import { AlgorythmInfo } from '../../AlgorythmInfo';\r\nimport { ISortAlgorythm } from '../ISortAlgorythm';\r\nimport { createSteps, AlgorythmStep } from '../../AlgorythmStep';\r\n\r\nexport class BubbleSort<T> implements ISortAlgorythm<T> {\r\n\r\n    private readonly _array: T[];\r\n    private readonly _compare: (a: T, b: T) => number;\r\n\r\n    private _currentStep?: AlgorythmStep;\r\n    private _isDone: boolean;\r\n\r\n    private _i: number;\r\n    private _j: number;\r\n\r\n    private _currentOperationNumber: number;\r\n\r\n    constructor(array: T[], compare: (a: T, b: T) => number) {\r\n\r\n        this._array = [...array];\r\n        this._compare = compare;\r\n\r\n        this._isDone = false\r\n\r\n        this._i = 0;\r\n        this._j = -1;\r\n\r\n        this._currentOperationNumber = 0;\r\n        this._currentStep = createSteps([ this.incrementIndexes.bind(this), this.swapElements.bind(this) ])\r\n    }\r\n\r\n    public get currentOperationNumber(): number {\r\n\r\n        return this._currentOperationNumber;\r\n    }\r\n\r\n    public get info(): AlgorythmInfo {\r\n\r\n        return {\r\n            name: \"bubble sort\",\r\n            link: \"https://en.wikipedia.org/wiki/Bubble_sort\"\r\n        };\r\n    }\r\n\r\n    public get array(): T[] {\r\n\r\n        return this._array;\r\n    }\r\n\r\n    public sort(): T[] {\r\n\r\n        while (!this._isDone) {\r\n\r\n            this.executeStep();\r\n        }\r\n\r\n        return this._array;\r\n    }\r\n\r\n    public get isFinished(): boolean {\r\n\r\n        return this._isDone;\r\n    }\r\n\r\n    public get currentSelection(): number[] {\r\n\r\n        return [ this._j, this._j + 1 ];\r\n    }\r\n\r\n    public executeStep(): void {\r\n\r\n        this._currentStep?.execute();\r\n        this._currentStep = this._currentStep?.next;\r\n        this._currentOperationNumber++;\r\n    }\r\n\r\n    public copyWithArray(array: T[]): ISortAlgorythm<T> {\r\n\r\n        return new BubbleSort<T>(array, this._compare);\r\n    }\r\n\r\n    private incrementIndexes(): void  {\r\n\r\n        this._j++;\r\n\r\n        if (this._j === this._array.length - this._i - 1) {\r\n\r\n            this._i++;\r\n            this._j = 0;\r\n        }\r\n\r\n        if (this._i === this._array.length - 1) {\r\n\r\n            this._isDone = true;\r\n        }\r\n    } \r\n\r\n    private swapElements(): void {\r\n\r\n        const a = this._array[this._j];\r\n        const b = this._array[this._j + 1];\r\n\r\n        const needSort = this._compare(a, b) > 0;\r\n\r\n        if (needSort) {\r\n\r\n            this._array[this._j] = b;\r\n            this._array[this._j + 1] = a;\r\n        }\r\n    }\r\n}","import { AlgorythmInfo } from '../../AlgorythmInfo';\r\nimport { ISortAlgorythm } from '../ISortAlgorythm';\r\n\r\ntype MergeSortContext = { left: number, right: number, middle: number, nextStep: MergeSortStep };\r\ntype MergeSortStep = () => void;\r\n\r\nexport class MergeSort<T> implements ISortAlgorythm<T> {\r\n\r\n    private readonly _contextStack: MergeSortContext[];\r\n\r\n    private readonly _array: T[];\r\n    private readonly _compare: (a: T, b: T) => number;\r\n\r\n    private _nextStep: MergeSortStep;\r\n    private _isDone: boolean;\r\n\r\n    private _middle: number;\r\n    private _right: number;\r\n    private _left: number;\r\n\r\n    private _leftSubArray: T[];\r\n    private _rightSubArray: T[];\r\n\r\n    private _leftMergeIdx: number;\r\n    private _rightMergeIdx: number;\r\n    private _mergeIdx: number;\r\n\r\n    private _currentOperationNumber: number;\r\n\r\n    constructor(array: T[], compare: (a: T, b: T) => number) {\r\n\r\n        this._array = [...array];\r\n        this._compare = compare;\r\n\r\n        this._isDone = false\r\n\r\n        this._middle = -1;\r\n        this._left = 0;\r\n        this._right = array.length - 1;\r\n\r\n        this._currentOperationNumber = 0;\r\n        this._nextStep = this.setArrayMiddle;\r\n\r\n        this._mergeIdx = -1;\r\n        this._leftMergeIdx = -1;\r\n        this._rightMergeIdx = -1;\r\n\r\n        this._leftSubArray = [];\r\n        this._rightSubArray = [];\r\n\r\n        this._contextStack = [];\r\n    }\r\n\r\n    public get currentOperationNumber(): number {\r\n\r\n        return this._currentOperationNumber;\r\n    }\r\n\r\n    public get info(): AlgorythmInfo {\r\n\r\n        return {\r\n            name: \"merge sort\",\r\n            link: \"https://en.wikipedia.org/wiki/Merge_sort\"\r\n        };\r\n    }\r\n\r\n    public get array(): T[] {\r\n\r\n        return this._array;\r\n    }\r\n\r\n    public sort(): T[] {\r\n\r\n        while (!this._isDone) {\r\n\r\n            this.executeStep();\r\n        }\r\n\r\n        return this._array;\r\n    }\r\n\r\n    public get isFinished(): boolean {\r\n\r\n        return this._isDone;\r\n    }\r\n\r\n    public get currentSelection(): number[] {\r\n\r\n        const selection: number[] = [];\r\n\r\n        for (let i = this._left; i <= this._right; i++) {\r\n\r\n            selection.push(i);\r\n        }\r\n\r\n        return selection;\r\n    }\r\n\r\n    public executeStep(): void {\r\n        \r\n        this._nextStep();\r\n\r\n        this._currentOperationNumber++;\r\n    }\r\n\r\n    public copyWithArray(array: T[]): ISortAlgorythm<T> {\r\n\r\n        return new MergeSort<T>(array, this._compare);\r\n    }\r\n\r\n    private setArrayMiddle(): void {\r\n\r\n        this._middle = Math.floor((this._right + this._left) / 2);\r\n\r\n        this._nextStep = this.mergeSortLeft;\r\n    }\r\n\r\n    private mergeSortLeft(): void {\r\n\r\n        this._nextStep = this.mergeSortRight;\r\n        \r\n        if (this._right <= this._left) {\r\n\r\n            this.restoreContext();\r\n\r\n            return;\r\n        }\r\n\r\n        this.saveContext();\r\n\r\n        this._right = this._middle;\r\n\r\n        this._nextStep = this.setArrayMiddle;\r\n    }\r\n\r\n    private mergeSortRight(): void {\r\n       \r\n        if (this._right <= this._left) {\r\n\r\n            this.restoreContext();\r\n            \r\n            return;\r\n        }\r\n\r\n        this._nextStep = this.merge;\r\n\r\n        this.saveContext();\r\n\r\n        this._left = this._middle + 1;\r\n\r\n        this._nextStep = this.setArrayMiddle;\r\n    }\r\n\r\n    private saveContext(): void {\r\n\r\n        this._contextStack.push({ \r\n            left: this._left, \r\n            right: this._right, \r\n            middle: this._middle, \r\n            nextStep: this._nextStep \r\n        });\r\n    }\r\n\r\n    private restoreContext(): void {\r\n\r\n        const context = this._contextStack.pop();\r\n\r\n        if (!context) {\r\n\r\n            return;\r\n        }\r\n\r\n        this._left = context?.left;\r\n        this._right = context?.right;\r\n        this._middle = context?.middle;\r\n        this._nextStep = context.nextStep;\r\n    }\r\n\r\n    private merge(): void {\r\n\r\n        this._leftSubArray = this._array.slice(this._left, this._middle + 1);\r\n        this._rightSubArray = this._array.slice(this._middle + 1, this._right + 1);\r\n        \r\n        this._leftMergeIdx = 0;\r\n        this._rightMergeIdx = 0;\r\n        this._mergeIdx = this._left;\r\n        \r\n        this._nextStep = this.mergeNextElement;\r\n    }\r\n\r\n    private mergeNextElement(): void {\r\n\r\n        if (this._leftMergeIdx < this._leftSubArray.length && this._rightMergeIdx < this._rightSubArray.length) {\r\n            \r\n            if (this._leftSubArray[this._leftMergeIdx] <= this._rightSubArray[this._rightMergeIdx]) {\r\n                \r\n                this._array[this._mergeIdx] = this._leftSubArray[this._leftMergeIdx];\r\n                this._leftMergeIdx++;\r\n            }\r\n            else {\r\n\r\n                this._array[this._mergeIdx] = this._rightSubArray[this._rightMergeIdx];\r\n                this._rightMergeIdx++;\r\n            }\r\n\r\n            this._mergeIdx++;\r\n\r\n            this._nextStep = this.mergeNextElement;\r\n\r\n            return;\r\n        }\r\n\r\n        if (this._leftMergeIdx < this._leftSubArray.length) {\r\n\r\n            this._array[this._mergeIdx] = this._leftSubArray[this._leftMergeIdx];\r\n\r\n            this._leftMergeIdx++;\r\n            this._mergeIdx++;\r\n\r\n            this._nextStep = this.mergeNextElement;\r\n\r\n            return;\r\n        }\r\n\r\n        if (this._rightMergeIdx < this._rightSubArray.length) {\r\n\r\n            this._array[this._mergeIdx] = this._rightSubArray[this._rightMergeIdx];\r\n\r\n            this._rightMergeIdx++;\r\n            this._mergeIdx++;\r\n\r\n            this._nextStep = this.mergeNextElement;\r\n\r\n            return;\r\n        }\r\n\r\n        if (this._left === 0 && this._right === this._array.length - 1) {\r\n\r\n            this._isDone = true;\r\n\r\n            return;\r\n        }\r\n\r\n        this.restoreContext();\r\n    }\r\n}","import React from \"react\";\r\n\r\nexport type ArrayItemParams = { height: number, isHighlighted: boolean, isNegative: boolean }\r\n\r\nexport const ArrayItem = ({ height = 100, isHighlighted = false, isNegative = false }: ArrayItemParams) => {\r\n\r\n    const classNames = [ 'item' ];\r\n\r\n    if (isNegative) {\r\n\r\n        classNames.push('item-negative')\r\n    } else {\r\n\r\n        classNames.push('item-positive')\r\n    }\r\n\r\n    if (isHighlighted) {\r\n\r\n        classNames.push('highlighted');\r\n    }\r\n\r\n    return (\r\n        <div className={classNames.join(' ')}>\r\n            <div style={{ height: height }} />\r\n            <div style={{ height: height }} />\r\n        </div>\r\n    );\r\n}","import React from \"react\";\r\nimport { ArrayItem } from \"./ArrayItem\";\r\nimport './Array.css'\r\n\r\ntype ArrayProps = { array: number[], selection: number[] };\r\n\r\nexport const Array = ({ array = [], selection = [] }: ArrayProps) => {\r\n\r\n    const max = Math.max(...array);\r\n    const min = Math.min(...array);\r\n\r\n    const maxHeight = Math.max(Math.abs(max), Math.abs(min));\r\n\r\n    return (\r\n        <div className='array-container'>\r\n            {\r\n                array.map((item, idx) => {\r\n                    \r\n                    const height = 100 * Math.abs(item) / maxHeight;\r\n                    const isNegative = item < 0;\r\n                    const isSelected = selection.includes(idx);\r\n\r\n                    return (\r\n                        <ArrayItem \r\n                            key={`array-item-${idx}`}\r\n                            height={height} \r\n                            isNegative={isNegative} \r\n                            isHighlighted={isSelected} \r\n                        />\r\n                    );\r\n                })\r\n            }\r\n        </div>\r\n    )\r\n}\r\n","import { CommandBar, ICommandBarItemProps, Icon, Label, ProgressIndicator } from \"@fluentui/react\";\r\nimport React from \"react\";\r\nimport { AlgorythmInfo } from \"../../model/AlgorythmInfo\";\r\nimport { Array } from \"./Array\";\r\nimport './Algorythm.css';\r\n\r\ntype AlgoViewProps = { \r\n    viewId: number,\r\n    closeView: (viewId: number) => void,\r\n    array: number[],\r\n    selection: number[],\r\n    isFinished: boolean,\r\n    isRunning: boolean,\r\n    operationsCount: number,\r\n    info: AlgorythmInfo\r\n};\r\n\r\nexport const AlgorythmView = (props: AlgoViewProps) => {\r\n\r\n    const { \r\n        array, \r\n        selection, \r\n        viewId, \r\n        closeView, \r\n        isRunning, \r\n        operationsCount, \r\n        isFinished, \r\n        info \r\n    } = props;\r\n\r\n    const items: ICommandBarItemProps[] = [\r\n        {\r\n            key: 'algoTitle',\r\n            text: info.name,\r\n            href: info.link,\r\n            iconProps: { iconName: 'Info' }\r\n        }\r\n    ];\r\n\r\n    const farItems: ICommandBarItemProps[] = [\r\n        {\r\n            key: 'closeBtn',\r\n            onClick: () => closeView(viewId),\r\n            iconProps: {\r\n                iconName: 'ChromeClose'\r\n            },\r\n            iconOnly: true\r\n        }\r\n    ]\r\n\r\n    return (\r\n        <div className='algorythm'>\r\n            <CommandBar items={items} farItems={farItems} />\r\n            <Array array={array} selection={selection} />\r\n            <ProgressIndicator progressHidden={!isRunning} />\r\n            <Label>Items: {array.length} | Operations: {operationsCount}</Label>\r\n            {\r\n                isFinished && (\r\n                    <Icon iconName='CheckMark' />\r\n                )\r\n            }\r\n        </div>\r\n    );\r\n} \r\n","import { Slider } from \"@fluentui/react\";\r\nimport React from \"react\";\r\nimport './ArraySettings.css';\r\n\r\ntype ArraySettingsProps = { \r\n    enabled: boolean,\r\n    defaultArraySize: number, \r\n    updateArray: (newSize: number) => void \r\n};\r\n\r\nexport class ArraySettings extends React.Component<ArraySettingsProps> {\r\n    \r\n    render() {\r\n\r\n        const { defaultArraySize = 10, updateArray, enabled } = this.props;\r\n\r\n        return (\r\n            <div className='array-settings-toolbar'>\r\n                <Slider \r\n                    showValue \r\n                    label='Array size' \r\n                    min={2} \r\n                    max={100} \r\n                    defaultValue={defaultArraySize} \r\n                    onChange={updateArray}\r\n                    disabled={!enabled}\r\n                />\r\n            </div>\r\n        );\r\n    }\r\n}\r\n","import { CommandBar, ICommandBarItemProps } from \"@fluentui/react\";\r\nimport React from \"react\";\r\nimport { BubbleSort } from \"../../model/sorting/bubble/BubbleSort\";\r\nimport { ISortAlgorythm } from \"../../model/sorting/ISortAlgorythm\";\r\nimport { MergeSort } from \"../../model/sorting/merge/MergeSort\";\r\nimport { AlgorythmView } from \"./Algorythm\";\r\nimport { ArraySettings } from \"./ArraySettings\";\r\nimport './Demo.css';\r\n\r\ntype DemoState = \"PLAYING\" | \"PAUSED\" | \"STOPPED\";\r\n\r\nconst STEP_INTERVAL = 150;\r\nconst DEFAULT_ARRAY_SIZE = 10;\r\n\r\ntype SortingDemoViewState = {\r\n    demoState?: DemoState,\r\n    sourceArray?: number[],\r\n    algorythms?: ISortAlgorythm<number>[]\r\n}\r\n\r\nexport class SortingDemoView extends React.Component<{}, SortingDemoViewState> {\r\n\r\n    private _stepTimerId: any;\r\n\r\n    constructor(props: {}) {\r\n\r\n        super(props);\r\n\r\n        this.state = {\r\n            demoState: \"STOPPED\",\r\n            algorythms: [],\r\n            sourceArray: []\r\n        };\r\n\r\n        this.addAlgorythm = this.addAlgorythm.bind(this);\r\n        this.addBubbleSort = this.addBubbleSort.bind(this);\r\n        this.addMergeSort = this.addMergeSort.bind(this);\r\n        this.createArray = this.createArray.bind(this);\r\n        this.executeStep = this.executeStep.bind(this);\r\n        this.pause = this.pause.bind(this);\r\n        this.play = this.play.bind(this);\r\n        this.stop = this.stop.bind(this);\r\n        this.removeAlgorythm = this.removeAlgorythm.bind(this);\r\n        this.updateSourceArray = this.updateSourceArray.bind(this);\r\n    }\r\n\r\n    componentDidMount() {\r\n\r\n        this.updateSourceArray(DEFAULT_ARRAY_SIZE);\r\n\r\n        this._stepTimerId = setInterval(this.executeStep, STEP_INTERVAL);\r\n    }\r\n\r\n    componentWillUnmount() {\r\n\r\n        clearInterval(this._stepTimerId);\r\n    }\r\n\r\n    render() {\r\n\r\n        const { demoState, algorythms = [] } = this.state;\r\n\r\n        const items: ICommandBarItemProps[] = [\r\n            {\r\n                key: 'addAlgo',\r\n                text: 'Add algorythm',\r\n                iconProps: { iconName: 'Add' },\r\n                disabled: demoState === \"PLAYING\" || demoState === \"PAUSED\",\r\n                subMenuProps: {\r\n                    items: [\r\n                        {\r\n                            key: 'bubbleSort',\r\n                            text: 'bubble sort',\r\n                            onClick: this.addBubbleSort\r\n                        },\r\n                        {\r\n                            key: 'mergeSort',\r\n                            text: 'merge sort',\r\n                            onClick: this.addMergeSort\r\n                        }\r\n                    ],\r\n                },\r\n            },\r\n            {\r\n                key: 'playDemo',\r\n                iconProps: { iconName: 'Play' },\r\n                disabled: demoState === \"PLAYING\" || algorythms.length === 0,\r\n                iconOnly: true,\r\n                onClick: this.play\r\n            },\r\n            {\r\n                key: 'pauseDemo',\r\n                iconProps: { iconName: 'Pause' },\r\n                disabled: demoState === \"PAUSED\" || demoState === \"STOPPED\",\r\n                iconOnly: true,\r\n                onClick: this.pause\r\n            },\r\n            {\r\n                key: 'stopDemo',\r\n                iconProps: { iconName: 'Stop' },\r\n                disabled: demoState === \"STOPPED\",\r\n                iconOnly: true,\r\n                onClick: this.stop\r\n            },\r\n        ];\r\n\r\n        return (\r\n            <div>\r\n                <CommandBar items={items} />\r\n                <ArraySettings\r\n                    enabled={this.canUpdateSourceArray}\r\n                    defaultArraySize={DEFAULT_ARRAY_SIZE}\r\n                    updateArray={this.updateSourceArray}\r\n                />\r\n                <div className='algorythms-container'>\r\n                {\r\n                    algorythms.map((i, idx) => {\r\n                        \r\n                        const isRunning = demoState === \"PLAYING\" && !i.isFinished;\r\n\r\n                        return (\r\n                            <AlgorythmView\r\n                                viewId={idx}\r\n                                array={i.array}\r\n                                selection={i.currentSelection}\r\n                                isRunning={isRunning}\r\n                                isFinished={i.isFinished}\r\n                                closeView={this.removeAlgorythm}\r\n                                operationsCount={i.currentOperationNumber}\r\n                                info={i.info}\r\n                            />\r\n                        );\r\n                    })\r\n                }\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n\r\n    private get canUpdateSourceArray(): boolean {\r\n\r\n        return this.state.demoState === \"STOPPED\";\r\n    }\r\n\r\n    private play(): void {\r\n\r\n        const { demoState, sourceArray = [], algorythms = [] } = this.state;\r\n\r\n        if (demoState === \"PAUSED\") {\r\n\r\n            this.setState({ demoState: \"PLAYING\" })\r\n        }\r\n\r\n        if (demoState === \"STOPPED\") {\r\n\r\n            const newArray = this.createArray(sourceArray.length);\r\n\r\n            const stateUpdate: SortingDemoViewState = { \r\n                demoState: \"PLAYING\", \r\n                sourceArray: newArray,\r\n                algorythms: algorythms.map(i => i.copyWithArray(sourceArray)),\r\n            };\r\n\r\n            this.setState(stateUpdate)\r\n        }\r\n    }\r\n\r\n    private pause(): void {\r\n\r\n        if (this.state.demoState === \"PLAYING\") {\r\n\r\n            this.setState({ demoState: \"PAUSED\" })\r\n        }\r\n    }\r\n\r\n    private stop(): void {\r\n\r\n        const { demoState } = this.state;\r\n\r\n        if (demoState === \"PLAYING\" || demoState === \"PAUSED\") {\r\n\r\n            const stateUpdate: SortingDemoViewState = {\r\n                demoState: \"STOPPED\"\r\n            };\r\n\r\n            this.setState(stateUpdate);\r\n        }\r\n    }\r\n\r\n    private addAlgorythm(algo: ISortAlgorythm<number>): void {\r\n\r\n        const { algorythms = [] } = this.state;\r\n\r\n        const stateUpdate: SortingDemoViewState = {\r\n            algorythms: algorythms.concat(algo)\r\n        }\r\n\r\n        this.setState(stateUpdate);\r\n    }\r\n\r\n    private removeAlgorythm(id: number): void {\r\n\r\n        const { algorythms = [] } = this.state;\r\n        \r\n        algorythms.splice(id, 1);\r\n        \r\n        const stateUpdate: SortingDemoViewState = {\r\n            algorythms\r\n        }\r\n\r\n        if (algorythms.length === 0) {\r\n            stateUpdate.demoState = \"STOPPED\";\r\n        }\r\n\r\n        this.setState(stateUpdate);\r\n    }\r\n\r\n    private updateSourceArray(size: number) {\r\n\r\n        if (this.canUpdateSourceArray) {\r\n            \r\n            const { algorythms = [] } = this.state;\r\n\r\n            const newArray = this.createArray(size);\r\n\r\n            const stateUpdate: SortingDemoViewState = {\r\n                sourceArray: this.createArray(size),\r\n                algorythms: algorythms.map(i => i.copyWithArray(newArray))\r\n            }\r\n    \r\n            this.setState(stateUpdate);\r\n        }\r\n    }\r\n\r\n    private addBubbleSort(): void {\r\n\r\n        const { sourceArray = [] } = this.state;\r\n\r\n        const algo = new BubbleSort<number>(sourceArray, (a, b) => a - b);\r\n        \r\n        this.addAlgorythm(algo)\r\n    }\r\n\r\n    private addMergeSort(): void {\r\n\r\n        const { sourceArray = [] } = this.state;\r\n\r\n        const algo = new MergeSort<number>(sourceArray, (a, b) => a - b);\r\n        \r\n        this.addAlgorythm(algo)\r\n    }\r\n\r\n    private executeStep(): void {\r\n\r\n        if (this.state.demoState === \"PLAYING\") {\r\n\r\n            const { algorythms = [] } = this.state;\r\n\r\n            const unfinished = algorythms.filter(a => !a.isFinished);\r\n\r\n            if (unfinished.length === 0) {\r\n\r\n                this.stop();\r\n\r\n                return;\r\n            }\r\n\r\n            unfinished.forEach((algo: ISortAlgorythm<number>) => {\r\n\r\n                if (!algo.isFinished) {\r\n\r\n                    algo.executeStep();\r\n                }\r\n            });\r\n\r\n            this.setState({ algorythms })\r\n        }\r\n    }\r\n\r\n    private createArray(size: number): number[] {\r\n\r\n        const array = [];\r\n\r\n        for (let i = 0; i < size; i++) {\r\n\r\n            const min = -10;\r\n            const max = 10;\r\n            const val = Math.floor(Math.random() * (max - min + 1)) + min;\r\n\r\n            array.push(val);\r\n        }\r\n\r\n        return array;\r\n    }\r\n}\r\n","import React from 'react';\nimport 'react-dom';\nimport './App.css';\nimport { AppTheme } from './view/AppTheme';\nimport { initializeIcons } from '@fluentui/react/lib/Icons';\nimport { SortingDemoView } from './view/sorting/Demo';\nimport { loadTheme } from '@fluentui/react';\n\nexport const App = () => {\n\n\tinitializeIcons();\n\tloadTheme(AppTheme);\n\n\treturn (\n\t\t<div className=\"App\">\n\t\t\t<SortingDemoView />\n\t\t</div>\n\t);\n}\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport { App } from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}