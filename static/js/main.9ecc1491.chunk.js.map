{"version":3,"sources":["view/AppTheme.ts","view/sorting/ArrayItem.tsx","view/sorting/Array.tsx","view/sorting/Algorythm.tsx","config/sorting.ts","view/sorting/ArraySettings.tsx","view/sorting/Demo.tsx","common/EventEmitter.ts","model/sorting/EventBasedSortAlgorythm.ts","model/sorting/bubble/BubbleSort.ts","model/sorting/bubble/BubbleSortAlgorythmFactory.ts","model/sorting/merge/MergeSort.ts","model/sorting/merge/MergeSortAlgorythmFactory.ts","model/sorting/quick/QuickSort.ts","model/sorting/quick/QuickSortAlgorythmFactory.ts","model/sorting/SortingInput.ts","model/sorting/insertion/InsertionSort.ts","model/sorting/insertion/InsertionSortAlgorythmFactory.ts","model/sorting/selection/SelectionSort.ts","model/sorting/selection/SelectionSortAlgorythmFactory.ts","model/sorting/SortingDemoModel.ts","model/AppModel.ts","App.tsx","reportWebVitals.js","index.js"],"names":["AppTheme","createTheme","palette","themePrimary","themeLighterAlt","themeLighter","themeLight","themeTertiary","themeSecondary","themeDarkAlt","themeDark","themeDarker","neutralLighterAlt","neutralLighter","neutralLight","neutralQuaternaryAlt","neutralQuaternary","neutralTertiaryAlt","neutralTertiary","neutralSecondary","neutralPrimaryAlt","neutralPrimary","neutralDark","black","white","ArrayItem","height","isHighlighted","isNegative","classNames","push","className","join","style","Array","array","selection","max","Math","min","maxHeight","abs","map","item","idx","isSelected","includes","key","AlgorythmView","props","viewId","closeView","isRunning","operationsCount","isFinished","info","items","text","name","href","link","iconProps","iconName","farItems","onClick","iconOnly","operationsCountString","CommandBar","ProgressIndicator","progressHidden","Label","length","Icon","demo","minSpeed","maxSpeed","stepInterval","minElement","maxElement","minSize","maxSize","Object","freeze","ArraySettings","model","updateArray","bind","regenerateArray","setRandomArray","state","arraySize","this","enabled","Slider","showValue","label","config","defaultValue","value","onChange","disabled","CommandBarButton","newSize","setArraySize","stateUpdate","setState","React","Component","SortingDemoView","algorythms","canPlay","canPause","canStop","canAddAlgorythm","demoSpeed","addAlgorythm","removeAlgorythm","changeDemoSpeed","pause","play","stop","onStepExecuted","onInputUpdated","addAlgorythmMenuProps","availableAlgorythms","i","algorythmName","demoControls","menuProps","canUpdateArray","input","isPlaying","currentSelection","currentOperationNumber","newSpeed","factory","id","EventEmitter","_events","_wrappers","Map","handler","event","get","add","set","Set","wrapper","remove","on","has","delete","size","clear","values","STEP_INITIATED_EVENT","EventBasedSortAlgorythm","compare","_eventEmitter","_info","_isFinished","_operationNumber","_selection","_array","_compare","algorythm","finally","emit","indexes","promise","Promise","resolve","reject","once","BubbleSort","bubbleSort","j","setSelection","waitForNextStep","BubbleSortAlgorythmFactory","MergeSort","mergeSort","from","to","middle","floor","highlightRange","merge","leftArray","rightArray","undefined","pickItem","shift","MergeSortAlgorythmFactory","QuickSort","quickSort","partition","low","high","pi","pivot","QuickSortAlgorythmFactory","SORTING_INPUT_UPDATED_EVENT","SortingInput","_arraySize","createArray","val","random","InsertionSort","insertionSort","InsertionSortAlgorythmFactory","SelectionSort","selectionSort","candidate","SelectionSortAlgorythmFactory","STEP_EXECUTED_EVENT","SortingDemoModel","_compareFunc","a","b","_input","_availableAlgorythms","_algorythms","_stepTimerId","_demoSpeed","_state","onInputUpdatedHandler","executeStep","setInterval","copyWithArray","algo","create","splice","clearInterval","unfinished","filter","forEach","dispose","canUpdateInput","AppModel","_sorting","App","initializeIcons","loadTheme","sorting","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.9ecc1491.chunk.js","sourcesContent":["import { createTheme } from \"@fluentui/react\";\n\nexport const AppTheme = createTheme({\n    palette: {\n      themePrimary: '#9a93c7',\n      themeLighterAlt: '#fafafd',\n      themeLighter: '#edecf6',\n      themeLight: '#dedcee',\n      themeTertiary: '#bfbbdd',\n      themeSecondary: '#a59fce',\n      themeDarkAlt: '#8b84b3',\n      themeDark: '#757097',\n      themeDarker: '#56526f',\n      neutralLighterAlt: '#faf9f8',\n      neutralLighter: '#f3f2f1',\n      neutralLight: '#edebe9',\n      neutralQuaternaryAlt: '#e1dfdd',\n      neutralQuaternary: '#d0d0d0',\n      neutralTertiaryAlt: '#c8c6c4',\n      neutralTertiary: '#a19f9d',\n      neutralSecondary: '#605e5c',\n      neutralPrimaryAlt: '#3b3a39',\n      neutralPrimary: '#323130',\n      neutralDark: '#201f1e',\n      black: '#000000',\n      white: '#ffffff',\n    }});","import React from \"react\";\n\nexport type ArrayItemParams = { height: number, isHighlighted: boolean, isNegative: boolean }\n\nexport const ArrayItem = ({ height = 100, isHighlighted = false, isNegative = false }: ArrayItemParams) => {\n\n    const classNames = [ 'item' ];\n\n    if (isNegative) {\n\n        classNames.push('item-negative')\n    } else {\n\n        classNames.push('item-positive')\n    }\n\n    if (isHighlighted) {\n\n        classNames.push('highlighted');\n    }\n\n    return (\n        <div className={classNames.join(' ')} style={{ height: `${height}%` }}>\n            <div />\n            <div />\n        </div>\n    );\n}","import React from \"react\";\nimport { ArrayItem } from \"./ArrayItem\";\nimport './Array.css'\n\ntype ArrayProps = { array: number[], selection: number[] };\n\nexport const Array = ({ array = [], selection = [] }: ArrayProps) => {\n\n    const max = Math.max(...array);\n    const min = Math.min(...array);\n\n    const maxHeight = Math.max(Math.abs(max), Math.abs(min));\n\n    return (\n        <div className='array-container'>\n            {\n                array.map((item, idx) => {\n                    \n                    const height = 100 * Math.abs(item) / maxHeight;\n                    const isNegative = item < 0;\n                    const isSelected = selection.includes(idx);\n\n                    return (\n                        <ArrayItem \n                            key={`array-item-${idx}`}\n                            height={height} \n                            isNegative={isNegative} \n                            isHighlighted={isSelected} \n                        />\n                    );\n                })\n            }\n        </div>\n    )\n}\n","import { CommandBar, ICommandBarItemProps, Icon, Label, ProgressIndicator } from \"@fluentui/react\";\nimport React from \"react\";\nimport { AlgorythmInfo } from \"../../model/AlgorythmInfo\";\nimport { Array } from \"./Array\";\nimport './Algorythm.css';\n\ntype AlgoViewProps = { \n    viewId: number,\n    closeView: (viewId: number) => void,\n    array: number[],\n    selection: number[],\n    isFinished: boolean,\n    isRunning: boolean,\n    operationsCount: number,\n    info: AlgorythmInfo\n};\n\nexport const AlgorythmView = (props: AlgoViewProps) => {\n\n    const { \n        array, \n        selection, \n        viewId, \n        closeView, \n        isRunning, \n        operationsCount, \n        isFinished, \n        info \n    } = props;\n\n    const items: ICommandBarItemProps[] = [\n        {\n            key: 'algoTitle',\n            text: info.name,\n            href: info.link,\n            iconProps: { iconName: 'Info' }\n        }\n    ];\n\n    const farItems: ICommandBarItemProps[] = [\n        {\n            key: 'closeBtn',\n            onClick: () => closeView(viewId),\n            iconProps: {\n                iconName: 'ChromeClose'\n            },\n            iconOnly: true\n        }\n    ]\n\n    const operationsCountString = operationsCount > 0\n        ? `~${operationsCount}`\n        : operationsCount;\n\n    return (\n        <div className='algorythm'>\n            <CommandBar items={items} farItems={farItems} />\n            <Array array={array} selection={selection} />\n            <ProgressIndicator progressHidden={!isRunning} />\n            <Label>Items: {array.length} | Operations: {operationsCountString}</Label>\n            {\n                isFinished && (\n                    <Icon iconName='CheckMark' />\n                )\n            }\n        </div>\n    );\n} \n","export const demo = {\n    minSpeed: 1,\n    maxSpeed: 100,\n    stepInterval: 500\n};\n\nexport const array = {\n    minElement: -10,\n    maxElement: 10,\n    minSize: 2,\n    maxSize: 250\n};\n\nObject.freeze(array);\nObject.freeze(demo);\n","import { CommandBarButton, Slider } from \"@fluentui/react\";\nimport React from \"react\";\nimport './ArraySettings.css';\nimport { Array } from \"./Array\";\nimport { array as config } from \"../../config/sorting\";\nimport { ISortingInput } from \"../../model/sorting/SortingInput\";\n\ntype ArraySettingsProps = { \n    model: ISortingInput,\n    enabled: boolean\n};\n\ntype ArraySettingsState = { \n    array: number[],\n    arraySize: number\n};\n\nexport class ArraySettings extends React.Component<ArraySettingsProps, ArraySettingsState> {\n    \n    constructor(props: ArraySettingsProps) {\n\n        super(props);\n\n        const { model } = props;\n\n        this.updateArray = this.updateArray.bind(this);\n        this.regenerateArray = this.regenerateArray.bind(this);\n\n        model.setRandomArray();\n\n        this.state = { \n            arraySize: model.arraySize,\n            array: model.array\n        };\n    }\n\n    render() {\n\n        const { enabled, model } = this.props;\n        const { array, arraySize } = this.state;\n\n        return (\n            <div className='array-settings-toolbar'>\n                <Slider \n                    showValue \n                    label='Array size' \n                    min={config.minSize} \n                    max={config.maxSize} \n                    defaultValue={model.arraySize} \n                    value={arraySize}\n                    onChange={this.updateArray}\n                    disabled={!enabled}\n                />\n                <Array array={array} selection={[]} />\n                <CommandBarButton \n                    iconProps={{ iconName:\"Refresh\" }} \n                    onClick={this.regenerateArray} \n                    disabled={!enabled} \n                />\n            </div>\n        );\n    }\n\n    private updateArray(newSize: number): void {\n\n        const { model } = this.props;\n\n        model.setArraySize(newSize);\n        model.setRandomArray();\n\n        const stateUpdate = {\n            arraySize: model.arraySize,\n            array: model.array\n        };\n\n        this.setState(stateUpdate);\n    }\n\n    private regenerateArray(): void {\n\n        const { model } = this.props;\n\n        model.setRandomArray();\n\n        const stateUpdate = {\n            array: model.array\n        };\n\n        this.setState(stateUpdate);\n    }\n}\n","import { CommandBar, CommandBarButton, ICommandBarItemProps, Slider } from \"@fluentui/react\";\nimport React from \"react\";\nimport { SortingDemoModel } from \"../../model/sorting/SortingDemoModel\";\nimport { ISortAlgorythm, ISortAlgorythmFactory } from \"../../model/sorting/ISortAlgorythm\";\nimport { AlgorythmView } from \"./Algorythm\";\nimport { ArraySettings } from \"./ArraySettings\";\nimport './Demo.css';\nimport * as config from \"../../config/sorting\";\n\ntype SortingDemoViewProps = {\n    model: SortingDemoModel\n}\n\ntype SortingDemoViewState = {\n    canPlay?: boolean,\n    canPause?: boolean,\n    canStop?: boolean,\n    canAddAlgorythm?: boolean, \n    demoSpeed?: number,\n    algorythms?: ISortAlgorythm<number>[]\n}\n\nexport class SortingDemoView extends React.Component<SortingDemoViewProps, SortingDemoViewState> {\n\n    constructor(props: SortingDemoViewProps) {\n\n        super(props);\n\n        const model = props.model;\n\n        this.state = {\n            algorythms: model.algorythms,\n            canPlay: model.canPlay,\n            canPause: model.canPause,\n            canStop: model.canStop,\n            canAddAlgorythm: model.canAddAlgorythm,\n            demoSpeed: model.demoSpeed\n        };\n\n        this.addAlgorythm = this.addAlgorythm.bind(this);\n        this.removeAlgorythm = this.removeAlgorythm.bind(this);\n        this.changeDemoSpeed = this.changeDemoSpeed.bind(this);\n        this.pause = this.pause.bind(this);\n        this.play = this.play.bind(this);\n        this.stop = this.stop.bind(this);\n    }\n\n    componentDidMount() {\n\n        const { model } = this.props;\n\n        model.onStepExecuted(() => { \n            \n            const stateUpdate: SortingDemoViewState = {\n                algorythms: model.algorythms,\n                canPlay: model.canPlay,\n                canPause: model.canPause,\n                canStop: model.canStop,\n                canAddAlgorythm: model.canAddAlgorythm\n            }\n    \n            this.setState(stateUpdate);\n        });\n\n        model.onInputUpdated(() => {\n\n            const stateUpdate: SortingDemoViewState = {\n                algorythms: model.algorythms,\n                canPlay: model.canPlay,\n                canPause: model.canPause,\n                canStop: model.canStop,\n                canAddAlgorythm: model.canAddAlgorythm\n            };\n\n            this.setState(stateUpdate);\n        });\n    }\n\n    render() {\n\n        const { model } = this.props;\n        const { \n            demoSpeed, \n            canAddAlgorythm, \n            canPlay, \n            canStop, \n            canPause, \n            algorythms = [],\n        } = this.state;\n\n        const addAlgorythmMenuProps = {\n            items: model.availableAlgorythms.map(i => ({\n                key: `add-algo_${i.algorythmName}`,\n                text: i.algorythmName,\n                onClick: () => this.addAlgorythm(i)\n            }))\n        };\n\n        const demoControls: ICommandBarItemProps[] = [\n            {\n                key: 'playDemo',\n                iconProps: { iconName: 'Play' },\n                disabled: !canPlay,\n                iconOnly: true,\n                onClick: this.play.bind(model)\n            },\n            {\n                key: 'pauseDemo',\n                iconProps: { iconName: 'Pause' },\n                disabled: !canPause,\n                iconOnly: true,\n                onClick: this.pause.bind(model)\n            },\n            {\n                key: 'stopDemo',\n                iconProps: { iconName: 'Stop' },\n                disabled: !canStop,\n                iconOnly: true,\n                onClick: this.stop.bind(model)\n            }\n        ];\n\n        return (\n            <div className='demo-view'>\n                <div className='demo-settings-toolbar'>\n                    <CommandBarButton text='Add algorythm'\n                        iconProps={{ iconName: 'Add' }}\n                        disabled={!canAddAlgorythm}\n                        menuProps={addAlgorythmMenuProps} />\n                    <CommandBar items={demoControls} />\n                    <Slider \n                        showValue \n                        label='Demo speed' \n                        min={config.demo.minSpeed} \n                        max={config.demo.maxSpeed} \n                        defaultValue={model.demoSpeed} \n                        onChange={this.changeDemoSpeed}\n                        value={demoSpeed}\n                    />\n                </div>\n                <ArraySettings\n                    enabled={model.canUpdateArray}\n                    model={model.input}\n                />\n                <div className='algorythms-container'>\n                {\n                    algorythms.map((i, idx) => {\n                        \n                        const isRunning = model.isPlaying && !i.isFinished;\n\n                        return (\n                            <AlgorythmView\n                                viewId={idx}\n                                array={i.array}\n                                selection={i.currentSelection}\n                                isRunning={isRunning}\n                                isFinished={i.isFinished}\n                                closeView={this.removeAlgorythm}\n                                operationsCount={i.currentOperationNumber}\n                                info={i.info}\n                            />\n                        );\n                    })\n                }\n                </div>\n            </div>\n        );\n    }\n\n    private changeDemoSpeed(newSpeed: number): void {\n\n        const { model } = this.props;\n\n        model.changeDemoSpeed(newSpeed);\n\n        const stateUpdate: SortingDemoViewState = {\n            demoSpeed: model.demoSpeed\n        }\n\n        this.setState(stateUpdate);\n    }\n\n    private addAlgorythm(factory: ISortAlgorythmFactory<number>): void {\n\n        const { model } = this.props;\n\n        model.addAlgorythm(factory);\n\n        const stateUpdate: SortingDemoViewState = {\n            algorythms: model.algorythms,\n            canPlay: model.canPlay,\n            canPause: model.canPause,\n            canStop: model.canStop,\n            canAddAlgorythm: model.canAddAlgorythm\n        }\n\n        this.setState(stateUpdate);\n    }\n\n    private removeAlgorythm(id: number): void {\n\n        const { model } = this.props;\n\n        model.removeAlgorythm(id);\n        \n        const stateUpdate: SortingDemoViewState = {\n            algorythms: model.algorythms\n        }\n\n        this.setState(stateUpdate);\n    }\n\n    \n    private play(): void {\n\n        const { model } = this.props;\n\n        model.play();\n        \n        const stateUpdate: SortingDemoViewState = {\n            canPlay: model.canPlay,\n            canPause: model.canPause,\n            canStop: model.canStop,\n            canAddAlgorythm: model.canAddAlgorythm\n        }\n\n        this.setState(stateUpdate);\n    }\n\n    private pause(): void {\n\n        const { model } = this.props;\n\n        model.pause();\n        \n        const stateUpdate: SortingDemoViewState = {\n            canPlay: model.canPlay,\n            canPause: model.canPause,\n            canStop: model.canStop,\n            canAddAlgorythm: model.canAddAlgorythm\n        }\n\n        this.setState(stateUpdate);\n    }\n\n    private stop(): void {\n\n        const { model } = this.props;\n\n        model.stop();\n        \n        const stateUpdate: SortingDemoViewState = {\n            canPlay: model.canPlay,\n            canPause: model.canPause,\n            canStop: model.canStop,\n            canAddAlgorythm: model.canAddAlgorythm\n        }\n\n        this.setState(stateUpdate);\n    }\n}\n","export class EventEmitter {\n\n    private readonly _events: Map<string, Set<() => void>>;\n    private readonly _wrappers: Map<() => void, () => void>;\n\n    constructor() {\n\n        this._events = new Map<string, Set<() => void>>();\n        this._wrappers = new Map<() => void, () => void>();\n    }\n\n    on(name: string, handler: () => void) {\n\n        const event = this._events.get(name);\n\n        if (event)\n            event.add(handler);\n        else\n            this._events.set(name, new Set([handler]));\n    }\n\n    once(name: string, handler: () => void) {\n\n        const wrapper = () => {\n\n            this.remove(name, wrapper);\n            handler();\n        };\n\n        this._wrappers.set(handler, wrapper);\n        this.on(name, wrapper);\n    }\n\n    remove(name: string, handler: () => void) {\n\n        const event = this._events.get(name);\n\n        if (!event)\n            return;\n\n        if (event.has(handler))\n            event.delete(handler);\n        else {\n\n            const wrapper = this._wrappers.get(handler);\n\n            if (wrapper) {\n\n                event.delete(wrapper);\n                this._wrappers.delete(wrapper);\n            }\n        }\n\n        if (event.size === 0)\n            this._events.delete(name);\n    }\n\n    clear() {\n\n        this._events.clear();\n        this._wrappers.clear();\n    }\n\n    emit(name: string) {\n\n        const event = this._events.get(name);\n\n        if (!event)\n            return;\n\n        for (const handler of event.values()) {\n\n            handler();\n        }\n    }\n}\n","import { EventEmitter } from \"events\";\nimport { AlgorythmInfo } from \"../AlgorythmInfo\";\nimport { ISortAlgorythm } from \"./ISortAlgorythm\";\n\nconst STEP_INITIATED_EVENT = \"STEP_INITIATED_EVENT\";\n\nexport abstract class EventBasedSortAlgorythm<T> implements ISortAlgorythm<T> {\n\n    private readonly _eventEmitter: EventEmitter;\n    private readonly _info: AlgorythmInfo;\n\n    private _isFinished: boolean;\n    private _operationNumber: number;\n    private _selection: number[];\n\n    protected readonly _array: T[];\n    protected readonly _compare: (a: T, b: T) => number;\n    \n    constructor(array: T[], compare: (a: T, b: T) => number, info: AlgorythmInfo) {\n\n        this._array = [...array];\n        this._compare = compare;\n        this._eventEmitter = new EventEmitter();\n        this._isFinished = false;\n        this._operationNumber = 0;\n        this._selection = [];\n        this._info = info;\n\n        this.algorythm()\n            .finally(() => { this._isFinished = true; })\n    }\n    \n    \n    public abstract copyWithArray(array: T[]): ISortAlgorythm<T>;\n    protected abstract algorythm(): Promise<void>;\n\n    public get info(): AlgorythmInfo {\n\n        return this._info;\n    }\n\n    public get array(): T[] {\n\n        return this._array;\n    }\n    \n    public get currentSelection(): number[] {\n\n        return this._selection;\n    }\n\n    public get isFinished(): boolean {\n\n        return this._isFinished;\n    }\n    \n    public get currentOperationNumber(): number {\n\n        return this._operationNumber;\n    }\n\n    public executeStep(): void {\n        \n        this._eventEmitter.emit(STEP_INITIATED_EVENT);\n        this._operationNumber++;\n    }\n\n    protected setSelection(indexes: number[]): void {\n\n        this._selection = indexes;\n    }\n\n    protected async waitForNextStep(): Promise<void> {\n\n        const promise = new Promise<void>((resolve, reject) => {\n\n            this._eventEmitter.once(STEP_INITIATED_EVENT, () => resolve());\n        });\n\n        return promise;\n    }\n}\n","import { ISortAlgorythm } from '../ISortAlgorythm';\nimport { EventBasedSortAlgorythm } from '../EventBasedSortAlgorythm';\n\nexport class BubbleSort<T> extends EventBasedSortAlgorythm<T> implements ISortAlgorythm<T> {\n\n    constructor(array: T[], compare: (a: T, b: T) => number) {\n\n         super(array, compare, { name: \"bubble sort\", link: \"https://en.wikipedia.org/wiki/Bubble_sort\" });\n    }\n\n    protected algorythm(): Promise<void> {\n        \n        return this.bubbleSort();\n    }\n\n    private async bubbleSort(): Promise<void> {\n\n        if (this._array.length < 2) {\n\n            return;\n        }\n\n        for (let i = this._array.length; i >= 0; i--) {\n\n            for (let j = 1; j < i; j++) {\n\n                this.setSelection([ j, j - 1 ]);\n\n                await this.waitForNextStep();\n\n                if (this._compare(this._array[j - 1], this._array[j]) > 0) {\n\n                    await this.waitForNextStep();\n\n                    [ this._array[j - 1], this._array[j] ] = [ this._array[j], this._array[j - 1] ];\n                }\n            }\n        }\n    }\n\n    public copyWithArray(array: T[]): ISortAlgorythm<T> {\n\n        return new BubbleSort<T>(array, this._compare);\n    }\n}","import { ISortAlgorythm, ISortAlgorythmFactory } from \"../ISortAlgorythm\";\nimport { BubbleSort } from \"./BubbleSort\";\n\nexport class BubbleSortAlgorythmFactory<T> implements ISortAlgorythmFactory<T> {\n    \n    private readonly _compare: (a: T, b: T) => number;\n\n    constructor(compare: (a: T, b: T) => number) {\n\n        this._compare = compare;\n    }\n\n    public get algorythmName(): string {\n\n        return \"bubble sort\";\n    }\n    \n    create(array: T[]): ISortAlgorythm<T> {\n\n        return new BubbleSort(array, this._compare);\n    }\n}","import { EventBasedSortAlgorythm } from \"../EventBasedSortAlgorythm\";\nimport { ISortAlgorythm } from \"../ISortAlgorythm\";\n\nexport class MergeSort<T> extends EventBasedSortAlgorythm<T> implements ISortAlgorythm<T> {\n\n    constructor(array: T[], compare: (a: T, b: T) => number) {\n        \n        super(array, compare, { name: \"merge sort\", link: \"https://en.wikipedia.org/wiki/Merge_sort\" });\n    }\n\n    public copyWithArray(array: T[]): ISortAlgorythm<T> {\n        \n        return new MergeSort<T>(array, this._compare);\n    }\n\n    protected algorythm(): Promise<void> {\n\n        return this.mergeSort(0, this._array.length - 1);\n    }\n\n    private async mergeSort(from: number, to: number): Promise<void> {\n\n        if (from < to) {\n\n            await this.waitForNextStep();\n            const middle = Math.floor(from + (to - from) / 2);\n            this.setSelection([ middle ]);\n            \n            this.highlightRange(from, middle);\n            await this.waitForNextStep();\n            await this.mergeSort(from, middle);\n            \n            this.highlightRange(middle + 1, to);\n            await this.waitForNextStep();\n            await this.mergeSort(middle + 1, to);\n\n            this.setSelection([from, to]);\n            await this.waitForNextStep();\n            await this.merge(from, middle, to);\n        }\n    }\n\n    private async merge(from: number, middle: number, to: number): Promise<void> {\n\n        const leftArray: T[] = [];\n        const rightArray: T[] = [];\n\n        for (let i = from; i <= to; i++) {\n\n            this.setSelection([from, to, i]);\n            await this.waitForNextStep();\n\n            if (i > middle) {\n            \n                await this.waitForNextStep();\n                rightArray.push(this._array[i]);\n            } \n            else {\n\n                await this.waitForNextStep();\n                leftArray.push(this._array[i]);\n            }\n        }\n\n        let i = from;\n        await this.waitForNextStep();\n        while (leftArray.length > 0 || rightArray.length > 0) {\n\n            await this.waitForNextStep();\n            const item = this.pickItem(leftArray, rightArray);\n                \n            if (item !== undefined) {\n\n                this.setSelection([from, to, i]);\n                this._array[i] = item;\n            }\n\n            await this.waitForNextStep();\n            i++;\n        }\n    }\n\n    private pickItem(leftArray: T[], rightArray: T[]): T | undefined {\n\n        if (leftArray.length > 0 && rightArray.length > 0) {\n\n            return this._compare(leftArray[0], rightArray[0]) <= 0\n                ? leftArray.shift()\n                : rightArray.shift();\n        }\n\n        if (leftArray.length < 1) {\n\n            return rightArray.shift();\n        }\n\n        return leftArray.shift();\n    }\n\n    private highlightRange(from: number, to: number): void {\n\n        const selection = [];\n\n        for (let i = from; i <= to; i++) {\n\n            selection.push(i);\n        }\n\n        this.setSelection(selection);\n    }\n}","import { ISortAlgorythm, ISortAlgorythmFactory } from \"../ISortAlgorythm\";\nimport { MergeSort } from \"./MergeSort\";\n\nexport class MergeSortAlgorythmFactory<T> implements ISortAlgorythmFactory<T> {\n    \n    private readonly _compare: (a: T, b: T) => number;\n\n    constructor(compare: (a: T, b: T) => number) {\n\n        this._compare = compare;\n    }\n\n    public get algorythmName(): string {\n\n        return \"merge sort\";\n    }\n    \n    create(array: T[]): ISortAlgorythm<T> {\n\n        return new MergeSort(array, this._compare);\n    }\n}","import { EventBasedSortAlgorythm } from \"../EventBasedSortAlgorythm\";\nimport { ISortAlgorythm } from \"../ISortAlgorythm\";\n\nexport class QuickSort<T> extends EventBasedSortAlgorythm<T> implements ISortAlgorythm<T> {\n    \n    constructor(array: T[], compare: (a: T, b: T) => number) {\n        \n        super(array, compare, { name: \"quick sort\", link: \"https://en.wikipedia.org/wiki/Quick_sort\" });\n\n        this.quickSort = this.quickSort.bind(this);\n        this.partition = this.partition.bind(this);\n    }\n\n    public copyWithArray(array: T[]): ISortAlgorythm<T> {\n        \n        return new QuickSort(array, this._compare);\n    }\n\n    protected algorythm(): Promise<void> {\n        \n        return this.quickSort(0, this._array.length - 1);\n    }\n\n    private async quickSort(low: number, high: number): Promise<void> {\n\n        if (low < high) \n        { \n            await this.waitForNextStep();\n\n            const pi = await this.partition(low, high); \n            \n            await this.waitForNextStep();\n            \n            await this.quickSort(low, pi - 1); \n            \n            await this.waitForNextStep();\n            \n            await this.quickSort(pi + 1, high); \n        }  \n    }\n\n    private async partition(low: number, high: number): Promise<number> { \n\n        const pivot = this._array[high];  \n\n        this.setSelection([ high ]);\n\n        await this.waitForNextStep();\n\n        let i = (low - 1);  \n\n        await this.waitForNextStep();\n\n        for (let j = low; j < high; j++) { \n  \n            this.setSelection([ high, j, i ]);\n\n            await this.waitForNextStep();\n\n            if (this._array[j] < pivot) { \n\n                await this.waitForNextStep();\n\n                i++; \n\n                await this.waitForNextStep();\n\n                [ this._array[i], this._array[j] ] = [ this._array[j], this._array[i] ];\n            } \n        } \n\n        await this.waitForNextStep();\n\n        this.setSelection([ high, i + 1 ]);\n        [ this._array[i + 1], this._array[high] ] = [ this._array[high], this._array[i + 1] ];\n\n        await this.waitForNextStep();\n\n        return i + 1; \n    } \n}\n","import { ISortAlgorythm, ISortAlgorythmFactory } from \"../ISortAlgorythm\";\nimport { QuickSort } from \"./QuickSort\";\n\nexport class QuickSortAlgorythmFactory<T> implements ISortAlgorythmFactory<T> {\n    \n    private readonly _compare: (a: T, b: T) => number;\n\n    constructor(compare: (a: T, b: T) => number) {\n\n        this._compare = compare;\n    }\n\n    public get algorythmName(): string {\n\n        return \"quick sort\";\n    }\n    \n    create(array: T[]): ISortAlgorythm<T> {\n\n        return new QuickSort(array, this._compare);\n    }\n}","import { EventEmitter } from \"../../common/EventEmitter\";\nimport { IDisposible } from \"../../common/IDisposible\";\nimport { array as config } from \"../../config/sorting\";\n\nconst SORTING_INPUT_UPDATED_EVENT = \"ON_SORTING_INPUT_UPDATED\";\n\nexport interface ISortingInput {\n\n    array: number[];\n\n    arraySize: number;\n\n    setArraySize(size: number): void;\n    \n    setRandomArray(): void;\n}\n\nexport class SortingInput implements ISortingInput, IDisposible {\n\n    private readonly _eventEmitter: EventEmitter;\n\n    private _arraySize: number = 10;\n    private _array: number[] = [];\n\n    constructor() {\n\n        this._eventEmitter = new EventEmitter();\n        this.setRandomArray();\n    }\n\n    public get array(): number[] {\n\n        return this._array;\n    }\n\n    public get arraySize(): number {\n\n        return this._arraySize;\n    }\n\n    public setArraySize(size: number): void {\n\n        if (size < config.minSize || size > config.maxSize) {\n\n            return;\n        }\n\n        this._arraySize = size;\n\n        this.setRandomArray();\n    }\n\n    public setRandomArray(): void {\n\n        this._array = this.createArray(this._arraySize, config.minElement, config.maxElement);\n\n        this._eventEmitter.emit(SORTING_INPUT_UPDATED_EVENT);\n    }\n\n    public onInputUpdated(handler: () => void): void {\n\n        this._eventEmitter.on(SORTING_INPUT_UPDATED_EVENT, handler);\n    }\n\n    private createArray(size: number, min: number, max: number): number[] {\n\n        const array = [];\n\n        for (let i = 0; i < size; i++) {\n\n            const val = Math.floor(Math.random() * (max - min + 1)) + min;\n\n            array.push(val);\n        }\n\n        return array;\n    }\n\n    public dispose(): void {\n\n        this._eventEmitter.clear();\n    }\n}\n\nexport function withGuard(canUpdateInput: () => boolean, model: ISortingInput): ISortingInput {\n\n    return {\n        get array(): number[] { return model.array; },\n        get arraySize(): number { return model.arraySize; },\n        setArraySize: (...args) => { if (canUpdateInput()) { model.setArraySize.bind(model)(...args) } },\n        setRandomArray: (...args) => { if (canUpdateInput()) { model.setRandomArray.bind(model)(...args) } }\n    };\n}\n","import { ISortAlgorythm } from '../ISortAlgorythm';\nimport { EventBasedSortAlgorythm } from '../EventBasedSortAlgorythm';\n\nexport class InsertionSort<T> extends EventBasedSortAlgorythm<T> implements ISortAlgorythm<T> {\n\n    constructor(array: T[], compare: (a: T, b: T) => number) {\n\n         super(array, compare, { name: \"insertion sort\", link: \"https://en.wikipedia.org/wiki/Insertion_sort\" });\n    }\n\n    protected algorythm(): Promise<void> {\n        \n        return this.insertionSort();\n    }\n\n    private async insertionSort(): Promise<void> {\n\n        if (this._array.length < 2) {\n\n            return;\n        }\n\n        for (let i = 1; i < this._array.length; i++) {\n\n            this.setSelection([ i ]);\n\n            await this.waitForNextStep();\n            \n            let j = i - 1;\n\n            await this.waitForNextStep();\n\n            while (j >= 0 && this._compare(this._array[j + 1], this._array[j]) < 0) {\n\n                await this.waitForNextStep();\n\n                this.setSelection([ j + 1, j, i ]);\n\n                [ this._array[j + 1], this._array[j] ] = [ this._array[j], this._array[j + 1] ];\n                \n                await this.waitForNextStep();\n                \n                j--;\n            }\n        }\n    }\n\n    public copyWithArray(array: T[]): ISortAlgorythm<T> {\n\n        return new InsertionSort<T>(array, this._compare);\n    }\n}","import { ISortAlgorythm, ISortAlgorythmFactory } from \"../ISortAlgorythm\";\nimport { InsertionSort } from \"./InsertionSort\";\n\nexport class InsertionSortAlgorythmFactory<T> implements ISortAlgorythmFactory<T> {\n    \n    private readonly _compare: (a: T, b: T) => number;\n\n    constructor(compare: (a: T, b: T) => number) {\n\n        this._compare = compare;\n    }\n\n    public get algorythmName(): string {\n\n        return \"insertion sort\";\n    }\n    \n    create(array: T[]): ISortAlgorythm<T> {\n\n        return new InsertionSort(array, this._compare);\n    }\n}","import { ISortAlgorythm } from '../ISortAlgorythm';\nimport { EventBasedSortAlgorythm } from '../EventBasedSortAlgorythm';\n\nexport class SelectionSort<T> extends EventBasedSortAlgorythm<T> implements ISortAlgorythm<T> {\n\n    constructor(array: T[], compare: (a: T, b: T) => number) {\n\n         super(array, compare, { name: \"selection sort\", link: \"https://en.wikipedia.org/wiki/Selection_sort\" });\n    }\n\n    protected algorythm(): Promise<void> {\n        \n        return this.selectionSort();\n    }\n\n    private async selectionSort(): Promise<void> {\n\n        if (this._array.length < 2) {\n\n            return;\n        }\n\n        for (let i = 0; i < this._array.length; i++) {\n\n            this.setSelection([ i ]);\n            await this.waitForNextStep();\n\n            let candidate = i;\n\n            await this.waitForNextStep();\n\n            for (let j = i + 1; j < this._array.length; j++) {\n                \n                this.setSelection([ i, j, candidate ]);\n                await this.waitForNextStep();\n\n                if (this._compare(this._array[j], this._array[candidate]) < 0) {\n\n                    await this.waitForNextStep();\n                    candidate = j;\n                    this.setSelection([ i, candidate ]);\n                }\n            }\n\n            await this.waitForNextStep();\n            [ this._array[candidate], this._array[i] ] = [ this._array[i], this._array[candidate] ];\n        }\n    }\n\n    public copyWithArray(array: T[]): ISortAlgorythm<T> {\n\n        return new SelectionSort<T>(array, this._compare);\n    }\n}","import { ISortAlgorythm, ISortAlgorythmFactory } from \"../ISortAlgorythm\";\nimport { SelectionSort } from \"./SelectionSort\";\n\nexport class SelectionSortAlgorythmFactory<T> implements ISortAlgorythmFactory<T> {\n    \n    private readonly _compare: (a: T, b: T) => number;\n\n    constructor(compare: (a: T, b: T) => number) {\n\n        this._compare = compare;\n    }\n\n    public get algorythmName(): string {\n\n        return \"selection sort\";\n    }\n    \n    create(array: T[]): ISortAlgorythm<T> {\n\n        return new SelectionSort(array, this._compare);\n    }\n}","import { EventEmitter } from \"../../common/EventEmitter\";\nimport { BubbleSortAlgorythmFactory } from \"./bubble/BubbleSortAlgorythmFactory\";\nimport { ISortAlgorythmFactory, ISortAlgorythm } from \"./ISortAlgorythm\";\nimport { MergeSortAlgorythmFactory } from \"./merge/MergeSortAlgorythmFactory\";\nimport { QuickSortAlgorythmFactory } from \"./quick/QuickSortAlgorythmFactory\";\nimport { ISortingInput, SortingInput, withGuard } from \"./SortingInput\";\nimport { demo as config } from \"../../config/sorting\";\nimport { IDisposible } from \"../../common/IDisposible\";\nimport { InsertionSortAlgorythmFactory } from \"./insertion/InsertionSortAlgorythmFactory\";\nimport { SelectionSortAlgorythmFactory } from \"./selection/SelectionSortAlgorythmFactory\";\n\nconst STEP_EXECUTED_EVENT = \"ON_STEP_EXECUTED_EVENT\";\n\ntype DemoState = \"PLAYING\" | \"PAUSED\" | \"STOPPED\";\n\nexport class SortingDemoModel implements IDisposible {\n\n    private readonly _compareFunc = (a: number, b: number) => a - b\n    private readonly _input: SortingInput;\n    private readonly _availableAlgorythms: ISortAlgorythmFactory<number>[];\n    private readonly _eventEmitter: EventEmitter;\n\n    private _algorythms: ISortAlgorythm<number>[];\n    private _stepTimerId: any;\n    private _demoSpeed: number;\n    private _state: DemoState;\n\n    constructor() {\n\n        this._input = new SortingInput();\n        this._input.onInputUpdated(this.onInputUpdatedHandler.bind(this));\n\n        this._availableAlgorythms = [\n            new BubbleSortAlgorythmFactory(this._compareFunc),\n            new MergeSortAlgorythmFactory(this._compareFunc),\n            new QuickSortAlgorythmFactory(this._compareFunc),\n            new InsertionSortAlgorythmFactory(this._compareFunc),\n            new SelectionSortAlgorythmFactory(this._compareFunc)\n        ];\n        this._algorythms = [];\n        this._state = \"STOPPED\";\n        this._eventEmitter = new EventEmitter();\n\n        this._demoSpeed = 10;\n        this.executeStep = this.executeStep.bind(this);\n\n        this._stepTimerId = setInterval(this.executeStep, config.stepInterval / this._demoSpeed);\n    }\n\n    public get input(): ISortingInput {\n\n        return withGuard(() => this.canUpdateArray, this._input);\n    }\n\n    public get algorythms(): ISortAlgorythm<number>[] {\n\n        return this._algorythms;\n    }\n\n    public get isPlaying(): boolean {\n\n        return this._state === \"PLAYING\";\n    }\n\n    public get canPlay(): boolean {\n\n        return this._algorythms.length > 0 && (this._state === \"PAUSED\" || this._state === \"STOPPED\");\n    }\n\n    public play(): void {\n\n        if (this.canPlay) {\n\n            if (this._state === \"STOPPED\") {\n    \n                this._algorythms = this._algorythms.map(i => i.copyWithArray(this._input.array));\n            }\n\n            this._state = \"PLAYING\";\n        }\n    }\n    \n    public get canPause(): boolean {\n\n        return this._state === \"PLAYING\";\n    }\n\n    public pause(): void {\n\n        if (this.canPause) {\n\n            this._state = \"PAUSED\";\n        }\n    }\n    \n    public get canStop(): boolean {\n\n        return this._state === \"PLAYING\" || this._state === \"PAUSED\";\n    }\n\n    public stop(): void {\n\n        if (this.canStop) {\n\n            this._state = \"STOPPED\";\n        }\n    }\n\n    public get canUpdateArray(): boolean {\n\n        return this._state === \"STOPPED\";\n    }\n\n    public get availableAlgorythms(): ISortAlgorythmFactory<number>[] {\n\n        return this._availableAlgorythms;\n    }\n\n    public get canAddAlgorythm(): boolean {\n\n        return this._state === \"STOPPED\";\n    }\n\n    public addAlgorythm(factory: ISortAlgorythmFactory<number>): void {\n\n        const algo = factory.create(this._input.array);\n\n        this._algorythms.push(algo);\n    }\n\n    public removeAlgorythm(id: number): void {\n\n        this._algorythms.splice(id, 1);\n\n        if (this._algorythms.length === 0) {\n            \n            this._state = \"STOPPED\";\n        }\n    }\n\n    public get demoSpeed(): number {\n\n        return this._demoSpeed;\n    }\n\n    public changeDemoSpeed(newSpeed: number): void {\n\n        if (newSpeed > config.minSpeed && newSpeed < config.maxSpeed) {\n\n            this._demoSpeed = newSpeed;\n\n            clearInterval(this._stepTimerId);\n\n            this._stepTimerId = setInterval(this.executeStep, config.stepInterval / this._demoSpeed);\n        }\n    }\n    \n    public onStepExecuted(handler: () => void): void {\n\n        this._eventEmitter.on(STEP_EXECUTED_EVENT, handler);\n    }\n\n    public onInputUpdated(handler: () => void): void {\n\n        this._input.onInputUpdated(handler);\n    }\n\n    private onInputUpdatedHandler(): void {\n\n        this._algorythms = this._algorythms.map(i => i.copyWithArray(this._input.array));\n    }\n\n    private executeStep(): void {\n\n        if (this._state === \"PLAYING\") {\n\n            const unfinished = this._algorythms.filter(a => !a.isFinished);\n\n            if (unfinished.length === 0) {\n\n                this.stop();\n            }\n\n            unfinished.forEach((algo: ISortAlgorythm<number>) => {\n\n                if (!algo.isFinished) {\n\n                    algo.executeStep();\n                }\n            });\n\n            this._eventEmitter.emit(STEP_EXECUTED_EVENT);\n        }\n    }\n\n    public dispose(): void {\n\n        clearInterval(this._stepTimerId);\n        this._eventEmitter.clear();\n        this._input.dispose();\n    }\n}\n","import { SortingDemoModel } from \"./sorting/SortingDemoModel\";\n\nexport class AppModel {\n\n    private readonly _sorting: SortingDemoModel;\n\n    constructor() {\n\n        this._sorting = new SortingDemoModel();\n    }\n\n    public get sorting(): SortingDemoModel {\n\n        return this._sorting;\n    } \n} \n","import React from 'react';\nimport 'react-dom';\nimport './App.css';\nimport { AppTheme } from './view/AppTheme';\nimport { initializeIcons } from '@fluentui/react/lib/Icons';\nimport { SortingDemoView } from './view/sorting/Demo';\nimport { loadTheme } from '@fluentui/react';\nimport { AppModel } from \"./model/AppModel\";\n\nexport const App = () => {\n\n\tinitializeIcons();\n\tloadTheme(AppTheme);\n\n\tconst model = new AppModel();\n\n\treturn (\n\t\t<div className=\"App\">\n\t\t\t<SortingDemoView model={model.sorting} />\n\t\t</div>\n\t);\n}\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport { App } from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}