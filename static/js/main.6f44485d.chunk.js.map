{"version":3,"sources":["view/AppTheme.ts","model/AlgorythmSM.ts","model/sorting/bubble/BubbleSort.ts","model/sorting/merge/MergeSort.ts","view/sorting/ArrayItem.tsx","view/sorting/Array.tsx","view/sorting/Algorythm.tsx","view/sorting/ArraySettings.tsx","view/sorting/Demo.tsx","App.tsx","reportWebVitals.js","index.js"],"names":["AppTheme","createTheme","palette","themePrimary","themeLighterAlt","themeLighter","themeLight","themeTertiary","themeSecondary","themeDarkAlt","themeDark","themeDarker","neutralLighterAlt","neutralLighter","neutralLight","neutralQuaternaryAlt","neutralQuaternary","neutralTertiaryAlt","neutralTertiary","neutralSecondary","neutralPrimaryAlt","neutralPrimary","neutralDark","black","white","AlgorythmStateMachine","initialState","_stateStack","_operationNumber","this","push","currentState","popState","isFinished","nextStates","transition","console","log","pop","length","BubbleSort","array","compare","_array","_compare","_sm","incrementIndexes","bind","swapElements","context","i","j","executeStep","state","nextState","a","b","operationNumber","name","link","currentOperationNumber","MergeSort","setArrayMiddle","mergeSortLeft","mergeSortRight","merge","mergeNextElement","left","right","leftMergeIdx","rightMergeIdx","leftSubArray","rightSubArray","mergeIdx","middle","Math","floor","slice","selection","ArrayItem","height","isHighlighted","isNegative","classNames","className","join","style","Array","max","min","maxHeight","abs","map","item","idx","isSelected","includes","key","AlgorythmView","props","viewId","closeView","isRunning","operationsCount","info","items","text","href","iconProps","iconName","farItems","onClick","iconOnly","operationsCountString","CommandBar","ProgressIndicator","progressHidden","Label","Icon","ArraySettings","updateArray","regenerateArray","arraySize","defaultArraySize","createArray","enabled","Slider","showValue","label","defaultValue","value","onChange","disabled","CommandBarButton","size","val","random","newSize","setState","React","Component","SortingDemoView","_stepTimerId","demoState","algorythms","sourceArray","addAlgorythm","addBubbleSort","addMergeSort","pause","play","stop","removeAlgorythm","updateSourceArray","changeDemoSpeed","setInterval","STEP_INTERVAL","clearInterval","addAlgorythmMenuProps","demoControls","menuProps","canUpdateSourceArray","currentSelection","stateUpdate","copyWithArray","algo","concat","id","splice","newArray","newSpeed","unfinished","filter","forEach","App","initializeIcons","loadTheme","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.6f44485d.chunk.js","sourcesContent":["import { createTheme } from \"@fluentui/react\";\r\n\r\nexport const AppTheme = createTheme({\r\n    palette: {\r\n      themePrimary: '#9a93c7',\r\n      themeLighterAlt: '#fafafd',\r\n      themeLighter: '#edecf6',\r\n      themeLight: '#dedcee',\r\n      themeTertiary: '#bfbbdd',\r\n      themeSecondary: '#a59fce',\r\n      themeDarkAlt: '#8b84b3',\r\n      themeDark: '#757097',\r\n      themeDarker: '#56526f',\r\n      neutralLighterAlt: '#faf9f8',\r\n      neutralLighter: '#f3f2f1',\r\n      neutralLight: '#edebe9',\r\n      neutralQuaternaryAlt: '#e1dfdd',\r\n      neutralQuaternary: '#d0d0d0',\r\n      neutralTertiaryAlt: '#c8c6c4',\r\n      neutralTertiary: '#a19f9d',\r\n      neutralSecondary: '#605e5c',\r\n      neutralPrimaryAlt: '#3b3a39',\r\n      neutralPrimary: '#323130',\r\n      neutralDark: '#201f1e',\r\n      black: '#000000',\r\n      white: '#ffffff',\r\n    }});","export type AlgorythmState<TContext> = {\r\n    context: TContext,\r\n    isFinished: boolean,\r\n    transition: AlgorythmStateTransition<TContext>\r\n};\r\n\r\nexport type AlgorythmStateTransition<TContext> = \r\n    (state: AlgorythmState<TContext>) => AlgorythmState<TContext>[];\r\n\r\nexport class AlgorythmStateMachine<TContext> {\r\n\r\n    private readonly _stateStack: AlgorythmState<TContext>[];\r\n    \r\n    protected _operationNumber: number;\r\n\r\n    constructor(initialState: AlgorythmState<TContext>) {\r\n\r\n        this._stateStack = [];\r\n        this._operationNumber = 0;\r\n\r\n        this._stateStack.push(initialState);\r\n    }\r\n\r\n    public get operationNumber(): number {\r\n\r\n        return this._operationNumber;\r\n    }\r\n\r\n    public get currentState(): AlgorythmState<TContext> {\r\n\r\n        return this._stateStack[this._stateStack.length - 1]\r\n    }\r\n\r\n    public executeStep(): void {\r\n\r\n        const currentState: AlgorythmState<TContext> | undefined = this.popState();\r\n\r\n        if (!currentState) {\r\n\r\n            console.log(\"Can not execute step. Stack is empty.\");\r\n\r\n            return;\r\n        }\r\n\r\n        if (currentState.isFinished) {\r\n\r\n            return;\r\n        }\r\n\r\n        const nextStates = currentState.transition(currentState);\r\n\r\n        this._stateStack.push(...nextStates);\r\n\r\n        this._operationNumber++;\r\n    }\r\n\r\n    private popState(): AlgorythmState<TContext> | undefined {\r\n\r\n        return this._stateStack.pop();\r\n    }\r\n}\r\n","import { AlgorythmInfo } from '../../AlgorythmInfo';\r\nimport { ISortAlgorythm } from '../ISortAlgorythm';\r\nimport { AlgorythmState, AlgorythmStateMachine } from '../../AlgorythmSM';\r\n\r\ntype BubbleSortState = AlgorythmState<BubbleSortContext>;\r\n\r\ntype BubbleSortContext = {\r\n    i: number;\r\n    j: number;\r\n}\r\n\r\nexport class BubbleSort<T> implements ISortAlgorythm<T> {\r\n\r\n    private readonly _array: T[];\r\n    private readonly _compare: (a: T, b: T) => number;\r\n    private readonly _sm: AlgorythmStateMachine<BubbleSortContext>;\r\n\r\n    constructor(array: T[], compare: (a: T, b: T) => number) {\r\n\r\n        this._array = [...array];\r\n        this._compare = compare;\r\n\r\n        this.incrementIndexes = this.incrementIndexes.bind(this)\r\n        this.swapElements = this.swapElements.bind(this)\r\n\r\n        const initialState: BubbleSortState = {\r\n            context: {\r\n                i: 0,\r\n                j: -1\r\n            },\r\n            isFinished: false,\r\n            transition: this.incrementIndexes\r\n        };\r\n\r\n        this._sm = new AlgorythmStateMachine<BubbleSortContext>(initialState);\r\n    }\r\n\r\n    public get currentOperationNumber(): number {\r\n\r\n        return this._sm.operationNumber;\r\n    }\r\n\r\n    public get info(): AlgorythmInfo {\r\n\r\n        return {\r\n            name: \"bubble sort\",\r\n            link: \"https://en.wikipedia.org/wiki/Bubble_sort\"\r\n        };\r\n    }\r\n\r\n    public get array(): T[] {\r\n\r\n        return this._array;\r\n    }\r\n    \r\n    public get currentState(): BubbleSortState {\r\n\r\n        return this._sm.currentState;\r\n    }\r\n\r\n    public sort(): T[] {\r\n\r\n        while (!this.isFinished) {\r\n\r\n            this.executeStep();\r\n        }\r\n\r\n        return this._array;\r\n    }\r\n\r\n    public get isFinished(): boolean {\r\n\r\n        return this._sm.currentState.isFinished;\r\n    }\r\n\r\n    public get currentSelection(): number[] {\r\n\r\n        const { j } = this.currentState.context;\r\n\r\n        return this.isFinished || this.currentOperationNumber === 0\r\n            ? [] \r\n            : [ j, j + 1 ];\r\n    }\r\n\r\n    public executeStep(): void {\r\n\r\n        this._sm.executeStep();\r\n    }\r\n\r\n    public copyWithArray(array: T[]): ISortAlgorythm<T> {\r\n\r\n        return new BubbleSort<T>(array, this._compare);\r\n    }\r\n\r\n    private incrementIndexes(state: BubbleSortState): BubbleSortState[]  {\r\n\r\n        const { i, j } = state.context;\r\n\r\n        const nextState: BubbleSortState = { \r\n            ...state,\r\n            context: {\r\n                ...state.context, j: j + 1 \r\n            },\r\n            transition: this.swapElements\r\n        };\r\n\r\n        if (nextState.context.j === this._array.length - i - 1) {\r\n\r\n            nextState.context.i = i + 1;\r\n            nextState.context.j = 0;\r\n        }\r\n\r\n        if (nextState.context.i === this._array.length - 1) {\r\n\r\n            nextState.isFinished = true;\r\n        }\r\n\r\n        return [ nextState ];\r\n    } \r\n\r\n    private swapElements(state: BubbleSortState): BubbleSortState[] {\r\n\r\n        const { j } = state.context;\r\n\r\n        const a = this._array[j];\r\n        const b = this._array[j + 1];\r\n\r\n        const needSort = this._compare(a, b) > 0;\r\n\r\n        if (needSort) {\r\n\r\n            this._array[j] = b;\r\n            this._array[j + 1] = a;\r\n        }\r\n\r\n        const nextState: BubbleSortState = {\r\n            ...state,\r\n            transition: this.incrementIndexes\r\n        }\r\n\r\n        return [ nextState ];\r\n    }\r\n}","import { AlgorythmInfo } from \"../../AlgorythmInfo\";\r\nimport { AlgorythmState, AlgorythmStateMachine } from \"../../AlgorythmSM\";\r\nimport { ISortAlgorythm } from \"../ISortAlgorythm\";\r\n\r\ntype MergeSortState<T> = AlgorythmState<MergeSortContext<T>>;\r\n\r\ntype MergeSortContext<T> = {\r\n    left: number, \r\n    right: number, \r\n    middle: number,\r\n    leftSubArray: T[],\r\n    rightSubArray: T[],\r\n    leftMergeIdx: number,\r\n    rightMergeIdx: number,\r\n    mergeIdx: number\r\n};\r\n\r\nexport class MergeSort<T> implements ISortAlgorythm<T> {\r\n\r\n    private readonly _array: T[];\r\n    private readonly _compare: (a: T, b: T) => number;\r\n    private readonly _sm: AlgorythmStateMachine<MergeSortContext<T>>;\r\n\r\n    constructor(array: T[], compare: (a: T, b: T) => number) {\r\n        \r\n        this._array = [...array];\r\n        this._compare = compare;\r\n\r\n        this.setArrayMiddle = this.setArrayMiddle.bind(this);\r\n        this.mergeSortLeft = this.mergeSortLeft.bind(this);\r\n        this.mergeSortRight = this.mergeSortRight.bind(this);\r\n        this.merge = this.merge.bind(this);\r\n        this.mergeNextElement = this.mergeNextElement.bind(this);\r\n\r\n        const initialState: MergeSortState<T> = {\r\n            context: {\r\n                left: 0,\r\n                right: array.length - 1,\r\n                leftMergeIdx: -1,\r\n                rightMergeIdx: -1,\r\n                leftSubArray: [],\r\n                rightSubArray: [],\r\n                mergeIdx: -1,\r\n                middle: -1\r\n            },\r\n            isFinished: false,\r\n            transition: this.setArrayMiddle\r\n        }\r\n\r\n        this._sm = new AlgorythmStateMachine(initialState);\r\n    }\r\n\r\n    public get currentState(): MergeSortState<T> {\r\n\r\n        return this._sm.currentState;\r\n    }\r\n\r\n    public get currentOperationNumber(): number {\r\n\r\n        return this._sm.operationNumber;\r\n    }\r\n\r\n    public get info(): AlgorythmInfo {\r\n\r\n        return {\r\n            name: \"merge sort\",\r\n            link: \"https://en.wikipedia.org/wiki/Merge_sort\"\r\n        };\r\n    }\r\n\r\n    public get array(): T[] {\r\n\r\n        return this._array;\r\n    }\r\n\r\n    public executeStep(): void {\r\n\r\n        this._sm.executeStep();\r\n    }\r\n\r\n    public sort(): T[] {\r\n\r\n        while (!this.currentState.isFinished) {\r\n\r\n            this.executeStep();\r\n        }\r\n\r\n        return this.array;\r\n    }\r\n\r\n    public get isFinished(): boolean {\r\n\r\n        return this.currentState.isFinished;\r\n    }\r\n\r\n    public get currentSelection(): number[] {\r\n\r\n        const { left, right } = this.currentState.context;\r\n\r\n        const selection: number[] = [];\r\n\r\n        for (let i = left; i <= right; i++) {\r\n\r\n            selection.push(i);\r\n        }\r\n\r\n        return selection;\r\n    }\r\n\r\n    public copyWithArray(array: T[]): ISortAlgorythm<T> {\r\n\r\n        return new MergeSort<T>(array, this._compare);\r\n    }\r\n\r\n    private setArrayMiddle(state: MergeSortState<T>): MergeSortState<T>[] {\r\n\r\n        const { left, right } = state.context;\r\n\r\n        const middle = Math.floor((right + left) / 2);\r\n\r\n        const nextState: MergeSortState<T> = {\r\n            ...state,\r\n            context: {\r\n                ...state.context,\r\n                middle\r\n            },\r\n            transition: this.mergeSortLeft\r\n        };\r\n\r\n        return [ nextState ];\r\n    }\r\n\r\n    private mergeSortLeft(state: MergeSortState<T>): MergeSortState<T>[] {\r\n\r\n        const { left, right, middle } = state.context;\r\n\r\n        if (right <= left) {\r\n\r\n            return [];\r\n        }\r\n\r\n        const stateToSave: MergeSortState<T> = {\r\n            ...state,\r\n            transition: this.mergeSortRight\r\n        } ;\r\n\r\n        const nextState: MergeSortState<T> = {\r\n            ...state,\r\n            context: {\r\n                ...state.context,\r\n                right: middle\r\n            },\r\n            transition: this.setArrayMiddle\r\n        };\r\n\r\n        return [ stateToSave, nextState ];\r\n    }\r\n\r\n    private mergeSortRight(state: MergeSortState<T>): MergeSortState<T>[] {\r\n       \r\n        const { left, right, middle } = state.context;\r\n\r\n        if (right <= left) {\r\n\r\n            return [];\r\n        }\r\n\r\n        const stateToSave: MergeSortState<T> = {\r\n            ...state,\r\n            transition: this.merge\r\n        } ;\r\n\r\n        const nextState: MergeSortState<T> = {\r\n            ...state,\r\n            context: {\r\n                ...state.context,\r\n                left: middle + 1\r\n            },\r\n            transition: this.setArrayMiddle\r\n        };\r\n\r\n        return [ stateToSave, nextState ];\r\n    }\r\n\r\n    private merge(state: MergeSortState<T>): MergeSortState<T>[] {\r\n\r\n        const { left, right, middle } = state.context;\r\n        \r\n        const nextState: MergeSortState<T> = {\r\n            ...state,\r\n            context: {\r\n                ...state.context,\r\n                leftSubArray: this._array.slice(left, middle + 1),\r\n                rightSubArray: this._array.slice(middle + 1, right + 1),\r\n                leftMergeIdx: 0,\r\n                rightMergeIdx: 0,\r\n                mergeIdx: left,\r\n            },\r\n            transition: this.mergeNextElement\r\n        };\r\n        \r\n        return [ nextState ];\r\n    }\r\n\r\n    private mergeNextElement(state: MergeSortState<T>): MergeSortState<T>[] {\r\n\r\n        const { \r\n            left, \r\n            right,\r\n            leftMergeIdx = -1, \r\n            leftSubArray = [],\r\n            rightMergeIdx = -1, \r\n            rightSubArray = [], \r\n            mergeIdx = -1 \r\n        } = state.context;\r\n\r\n        const nextState: MergeSortState<T> = {\r\n            ...state,\r\n            context: {\r\n                ...state.context\r\n            }\r\n        };\r\n\r\n        if (leftMergeIdx < leftSubArray.length && rightMergeIdx < rightSubArray.length) {\r\n            \r\n            if (this._compare(leftSubArray[leftMergeIdx], rightSubArray[rightMergeIdx]) <= 0) {\r\n                \r\n                this._array[mergeIdx] = leftSubArray[leftMergeIdx];\r\n                nextState.context.leftMergeIdx = leftMergeIdx + 1;\r\n            }\r\n            else {\r\n\r\n                this._array[mergeIdx] = rightSubArray[rightMergeIdx];\r\n                nextState.context.rightMergeIdx = rightMergeIdx + 1;\r\n            }\r\n\r\n            nextState.context.mergeIdx = mergeIdx + 1;\r\n\r\n            nextState.transition = this.mergeNextElement;\r\n\r\n            return [ nextState ];\r\n        }\r\n\r\n        if (leftMergeIdx < leftSubArray.length) {\r\n\r\n            this._array[mergeIdx] = leftSubArray[leftMergeIdx];\r\n\r\n            nextState.context.leftMergeIdx = leftMergeIdx + 1;\r\n            nextState.context.mergeIdx = mergeIdx + 1;\r\n\r\n            nextState.transition = this.mergeNextElement;\r\n\r\n            return [ nextState ];\r\n        }\r\n\r\n        if (rightMergeIdx < rightSubArray.length) {\r\n\r\n            this._array[mergeIdx] = rightSubArray[rightMergeIdx];\r\n\r\n            nextState.context.rightMergeIdx = leftMergeIdx + 1;\r\n            nextState.context.mergeIdx = mergeIdx + 1;\r\n\r\n            nextState.transition = this.mergeNextElement;\r\n\r\n            return [ nextState ];\r\n        }\r\n\r\n        if (left === 0 && right === this._array.length - 1) {\r\n\r\n            nextState.isFinished = true;\r\n\r\n            return [ nextState ];\r\n        }\r\n\r\n        return [ ];\r\n    }\r\n}","import React from \"react\";\r\n\r\nexport type ArrayItemParams = { height: number, isHighlighted: boolean, isNegative: boolean }\r\n\r\nexport const ArrayItem = ({ height = 100, isHighlighted = false, isNegative = false }: ArrayItemParams) => {\r\n\r\n    const classNames = [ 'item' ];\r\n\r\n    if (isNegative) {\r\n\r\n        classNames.push('item-negative')\r\n    } else {\r\n\r\n        classNames.push('item-positive')\r\n    }\r\n\r\n    if (isHighlighted) {\r\n\r\n        classNames.push('highlighted');\r\n    }\r\n\r\n    return (\r\n        <div className={classNames.join(' ')} style={{ height: `${height}%` }}>\r\n            <div />\r\n            <div />\r\n        </div>\r\n    );\r\n}","import React from \"react\";\r\nimport { ArrayItem } from \"./ArrayItem\";\r\nimport './Array.css'\r\n\r\ntype ArrayProps = { array: number[], selection: number[] };\r\n\r\nexport const Array = ({ array = [], selection = [] }: ArrayProps) => {\r\n\r\n    const max = Math.max(...array);\r\n    const min = Math.min(...array);\r\n\r\n    const maxHeight = Math.max(Math.abs(max), Math.abs(min));\r\n\r\n    return (\r\n        <div className='array-container'>\r\n            {\r\n                array.map((item, idx) => {\r\n                    \r\n                    const height = 100 * Math.abs(item) / maxHeight;\r\n                    const isNegative = item < 0;\r\n                    const isSelected = selection.includes(idx);\r\n\r\n                    return (\r\n                        <ArrayItem \r\n                            key={`array-item-${idx}`}\r\n                            height={height} \r\n                            isNegative={isNegative} \r\n                            isHighlighted={isSelected} \r\n                        />\r\n                    );\r\n                })\r\n            }\r\n        </div>\r\n    )\r\n}\r\n","import { CommandBar, ICommandBarItemProps, Icon, Label, ProgressIndicator } from \"@fluentui/react\";\r\nimport React from \"react\";\r\nimport { AlgorythmInfo } from \"../../model/AlgorythmInfo\";\r\nimport { Array } from \"./Array\";\r\nimport './Algorythm.css';\r\n\r\ntype AlgoViewProps = { \r\n    viewId: number,\r\n    closeView: (viewId: number) => void,\r\n    array: number[],\r\n    selection: number[],\r\n    isFinished: boolean,\r\n    isRunning: boolean,\r\n    operationsCount: number,\r\n    info: AlgorythmInfo\r\n};\r\n\r\nexport const AlgorythmView = (props: AlgoViewProps) => {\r\n\r\n    const { \r\n        array, \r\n        selection, \r\n        viewId, \r\n        closeView, \r\n        isRunning, \r\n        operationsCount, \r\n        isFinished, \r\n        info \r\n    } = props;\r\n\r\n    const items: ICommandBarItemProps[] = [\r\n        {\r\n            key: 'algoTitle',\r\n            text: info.name,\r\n            href: info.link,\r\n            iconProps: { iconName: 'Info' }\r\n        }\r\n    ];\r\n\r\n    const farItems: ICommandBarItemProps[] = [\r\n        {\r\n            key: 'closeBtn',\r\n            onClick: () => closeView(viewId),\r\n            iconProps: {\r\n                iconName: 'ChromeClose'\r\n            },\r\n            iconOnly: true\r\n        }\r\n    ]\r\n\r\n    const operationsCountString = operationsCount > 0\r\n        ? `~${operationsCount}`\r\n        : operationsCount;\r\n\r\n    return (\r\n        <div className='algorythm'>\r\n            <CommandBar items={items} farItems={farItems} />\r\n            <Array array={array} selection={selection} />\r\n            <ProgressIndicator progressHidden={!isRunning} />\r\n            <Label>Items: {array.length} | Operations: {operationsCountString}</Label>\r\n            {\r\n                isFinished && (\r\n                    <Icon iconName='CheckMark' />\r\n                )\r\n            }\r\n        </div>\r\n    );\r\n} \r\n","import { CommandBar, CommandBarButton, ICommandBarItemProps, Label, Slider } from \"@fluentui/react\";\r\nimport React from \"react\";\r\nimport './ArraySettings.css';\r\nimport { Array } from \"./Array\";\r\n \r\ntype ArraySettingsProps = { \r\n    enabled: boolean,\r\n    defaultArraySize: number, \r\n    updateArray: (newArray: number[]) => void \r\n};\r\n\r\ntype ArraySettingsState = { \r\n    array: number[],\r\n    arraySize: number\r\n};\r\n\r\nexport class ArraySettings extends React.Component<ArraySettingsProps, ArraySettingsState> {\r\n    \r\n    constructor(props: ArraySettingsProps) {\r\n\r\n        super(props);\r\n\r\n        this.updateArray = this.updateArray.bind(this);\r\n        this.regenerateArray = this.regenerateArray.bind(this);\r\n\r\n        this.state = { \r\n            arraySize: props.defaultArraySize, \r\n            array: this.createArray(props.defaultArraySize) \r\n        };\r\n\r\n        props.updateArray(this.state.array);\r\n    }\r\n\r\n    render() {\r\n\r\n        const { defaultArraySize = 10, enabled } = this.props;\r\n        const { array, arraySize } = this.state;\r\n\r\n        return (\r\n            <div className='array-settings-toolbar'>\r\n                <Slider \r\n                    showValue \r\n                    label='Array size' \r\n                    min={2} \r\n                    max={250} \r\n                    defaultValue={defaultArraySize} \r\n                    value={arraySize}\r\n                    onChange={this.updateArray}\r\n                    disabled={!enabled}\r\n                />\r\n                <Array array={array} selection={[]} />\r\n                <CommandBarButton \r\n                    iconProps={{ iconName:\"Refresh\" }} \r\n                    onClick={this.regenerateArray} \r\n                    disabled={!enabled} \r\n                />\r\n            </div>\r\n        );\r\n    }\r\n\r\n    private createArray(size: number): number[] {\r\n\r\n        const array = [];\r\n\r\n        for (let i = 0; i < size; i++) {\r\n\r\n            const min = -10;\r\n            const max = 10;\r\n            const val = Math.floor(Math.random() * (max - min + 1)) + min;\r\n\r\n            array.push(val);\r\n        }\r\n\r\n        return array;\r\n    }\r\n\r\n    private updateArray(newSize: number): void {\r\n\r\n        const { updateArray } = this.props;\r\n\r\n        const array = this.createArray(newSize);\r\n\r\n        this.setState({ arraySize: newSize, array });\r\n\r\n        updateArray(array);\r\n    }\r\n\r\n    private regenerateArray(): void {\r\n\r\n        const { updateArray } = this.props;\r\n        const { arraySize } = this.state;\r\n\r\n        const array = this.createArray(arraySize);\r\n\r\n        this.setState({ array });\r\n\r\n        updateArray(array);\r\n    }\r\n}\r\n","import { CommandBar, CommandBarButton, CommandButton, ICommandBarItemProps, Slider } from \"@fluentui/react\";\r\nimport React from \"react\";\r\nimport { BubbleSort } from \"../../model/sorting/bubble/BubbleSort\";\r\nimport { ISortAlgorythm } from \"../../model/sorting/ISortAlgorythm\";\r\nimport { MergeSort } from \"../../model/sorting/merge/MergeSort\";\r\nimport { AlgorythmView } from \"./Algorythm\";\r\nimport { ArraySettings } from \"./ArraySettings\";\r\nimport './Demo.css';\r\n\r\ntype DemoState = \"PLAYING\" | \"PAUSED\" | \"STOPPED\";\r\n\r\nconst STEP_INTERVAL = 500;\r\nconst DEFAULT_ARRAY_SIZE = 10;\r\nconst DEFAULT_DEMO_SPEED = 10;\r\n\r\ntype SortingDemoViewState = {\r\n    demoState?: DemoState,\r\n    sourceArray?: number[],\r\n    algorythms?: ISortAlgorythm<number>[]\r\n}\r\n\r\nexport class SortingDemoView extends React.Component<{}, SortingDemoViewState> {\r\n\r\n    private _stepTimerId: any;\r\n\r\n    constructor(props: {}) {\r\n\r\n        super(props);\r\n\r\n        this.state = {\r\n            demoState: \"STOPPED\",\r\n            algorythms: [],\r\n            sourceArray: []\r\n        };\r\n\r\n        this.addAlgorythm = this.addAlgorythm.bind(this);\r\n        this.addBubbleSort = this.addBubbleSort.bind(this);\r\n        this.addMergeSort = this.addMergeSort.bind(this);\r\n        this.executeStep = this.executeStep.bind(this);\r\n        this.pause = this.pause.bind(this);\r\n        this.play = this.play.bind(this);\r\n        this.stop = this.stop.bind(this);\r\n        this.removeAlgorythm = this.removeAlgorythm.bind(this);\r\n        this.updateSourceArray = this.updateSourceArray.bind(this);\r\n        this.changeDemoSpeed = this.changeDemoSpeed.bind(this);\r\n    }\r\n\r\n    componentDidMount() {\r\n\r\n        this._stepTimerId = setInterval(this.executeStep, STEP_INTERVAL / DEFAULT_DEMO_SPEED);\r\n    }\r\n\r\n    componentWillUnmount() {\r\n\r\n        clearInterval(this._stepTimerId);\r\n    }\r\n\r\n    render() {\r\n\r\n        const { demoState, algorythms = [] } = this.state;\r\n\r\n        const addAlgorythmMenuProps = {\r\n            items: [\r\n                {\r\n                    key: 'bubbleSort',\r\n                    text: 'bubble sort',\r\n                    onClick: this.addBubbleSort\r\n                },\r\n                {\r\n                    key: 'mergeSort',\r\n                    text: 'merge sort',\r\n                    onClick: this.addMergeSort\r\n                }\r\n            ],\r\n        };\r\n\r\n        const demoControls: ICommandBarItemProps[] = [\r\n            {\r\n                key: 'playDemo',\r\n                iconProps: { iconName: 'Play' },\r\n                disabled: demoState === \"PLAYING\" || algorythms.length === 0,\r\n                iconOnly: true,\r\n                onClick: this.play\r\n            },\r\n            {\r\n                key: 'pauseDemo',\r\n                iconProps: { iconName: 'Pause' },\r\n                disabled: demoState === \"PAUSED\" || demoState === \"STOPPED\",\r\n                iconOnly: true,\r\n                onClick: this.pause\r\n            },\r\n            {\r\n                key: 'stopDemo',\r\n                iconProps: { iconName: 'Stop' },\r\n                disabled: demoState === \"STOPPED\",\r\n                iconOnly: true,\r\n                onClick: this.stop\r\n            }\r\n        ];\r\n\r\n        return (\r\n            <div className='demo-view'>\r\n                <div className='demo-settings-toolbar'>\r\n                    <CommandBarButton text='Add algorythm'\r\n                        iconProps={{ iconName: 'Add' }}\r\n                        disabled={demoState === \"PLAYING\" || demoState === \"PAUSED\"}\r\n                        menuProps={addAlgorythmMenuProps} />\r\n                    <CommandBar items={demoControls} />\r\n                    <Slider \r\n                        showValue \r\n                        label='Demo speed' \r\n                        min={1} \r\n                        max={100} \r\n                        defaultValue={DEFAULT_DEMO_SPEED} \r\n                        onChange={this.changeDemoSpeed}\r\n                    />\r\n                </div>\r\n                <ArraySettings\r\n                    enabled={this.canUpdateSourceArray}\r\n                    defaultArraySize={DEFAULT_ARRAY_SIZE}\r\n                    updateArray={this.updateSourceArray}\r\n                />\r\n                <div className='algorythms-container'>\r\n                {\r\n                    algorythms.map((i, idx) => {\r\n                        \r\n                        const isRunning = demoState === \"PLAYING\" && !i.isFinished;\r\n\r\n                        return (\r\n                            <AlgorythmView\r\n                                viewId={idx}\r\n                                array={i.array}\r\n                                selection={i.currentSelection}\r\n                                isRunning={isRunning}\r\n                                isFinished={i.isFinished}\r\n                                closeView={this.removeAlgorythm}\r\n                                operationsCount={i.currentOperationNumber}\r\n                                info={i.info}\r\n                            />\r\n                        );\r\n                    })\r\n                }\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n\r\n    private get canUpdateSourceArray(): boolean {\r\n\r\n        return this.state.demoState === \"STOPPED\";\r\n    }\r\n\r\n    private play(): void {\r\n\r\n        const { demoState, sourceArray = [], algorythms = [] } = this.state;\r\n\r\n        if (demoState === \"PAUSED\") {\r\n\r\n            this.setState({ demoState: \"PLAYING\" })\r\n        }\r\n\r\n        if (demoState === \"STOPPED\") {\r\n\r\n            const stateUpdate: SortingDemoViewState = { \r\n                demoState: \"PLAYING\",\r\n                algorythms: algorythms.map(i => i.copyWithArray(sourceArray)),\r\n            };\r\n\r\n            this.setState(stateUpdate)\r\n        }\r\n    }\r\n\r\n    private pause(): void {\r\n\r\n        if (this.state.demoState === \"PLAYING\") {\r\n\r\n            this.setState({ demoState: \"PAUSED\" })\r\n        }\r\n    }\r\n\r\n    private stop(): void {\r\n\r\n        const { demoState } = this.state;\r\n\r\n        if (demoState === \"PLAYING\" || demoState === \"PAUSED\") {\r\n\r\n            const stateUpdate: SortingDemoViewState = {\r\n                demoState: \"STOPPED\"\r\n            };\r\n\r\n            this.setState(stateUpdate);\r\n        }\r\n    }\r\n\r\n    private addAlgorythm(algo: ISortAlgorythm<number>): void {\r\n\r\n        const { algorythms = [] } = this.state;\r\n\r\n        const stateUpdate: SortingDemoViewState = {\r\n            algorythms: algorythms.concat(algo)\r\n        }\r\n\r\n        this.setState(stateUpdate);\r\n    }\r\n\r\n    private removeAlgorythm(id: number): void {\r\n\r\n        const { algorythms = [] } = this.state;\r\n        \r\n        algorythms.splice(id, 1);\r\n        \r\n        const stateUpdate: SortingDemoViewState = {\r\n            algorythms\r\n        }\r\n\r\n        if (algorythms.length === 0) {\r\n            stateUpdate.demoState = \"STOPPED\";\r\n        }\r\n\r\n        this.setState(stateUpdate);\r\n    }\r\n\r\n    private updateSourceArray(newArray: number[]) {\r\n\r\n        if (this.canUpdateSourceArray) {\r\n            \r\n            const { algorythms = [] } = this.state;\r\n\r\n            const stateUpdate: SortingDemoViewState = {\r\n                sourceArray: newArray,\r\n                algorythms: algorythms.map(i => i.copyWithArray(newArray))\r\n            }\r\n    \r\n            this.setState(stateUpdate);\r\n        }\r\n    }\r\n\r\n    private changeDemoSpeed(newSpeed: number): void {\r\n\r\n        clearInterval(this._stepTimerId);\r\n\r\n        this._stepTimerId = setInterval(this.executeStep, STEP_INTERVAL / newSpeed);\r\n    }\r\n\r\n    private addBubbleSort(): void {\r\n\r\n        const { sourceArray = [] } = this.state;\r\n\r\n        const algo = new BubbleSort<number>(sourceArray, (a, b) => a - b);\r\n        \r\n        this.addAlgorythm(algo)\r\n    }\r\n\r\n    private addMergeSort(): void {\r\n\r\n        const { sourceArray = [] } = this.state;\r\n\r\n        const algo = new MergeSort<number>(sourceArray, (a, b) => a - b);\r\n        \r\n        this.addAlgorythm(algo)\r\n    }\r\n\r\n    private executeStep(): void {\r\n\r\n        if (this.state.demoState === \"PLAYING\") {\r\n\r\n            const { algorythms = [] } = this.state;\r\n\r\n            const unfinished = algorythms.filter(a => !a.isFinished);\r\n\r\n            if (unfinished.length === 0) {\r\n\r\n                this.stop();\r\n\r\n                return;\r\n            }\r\n\r\n            unfinished.forEach((algo: ISortAlgorythm<number>) => {\r\n\r\n                if (!algo.isFinished) {\r\n\r\n                    algo.executeStep();\r\n                }\r\n            });\r\n\r\n            this.setState({ algorythms })\r\n        }\r\n    }\r\n}\r\n","import React from 'react';\nimport 'react-dom';\nimport './App.css';\nimport { AppTheme } from './view/AppTheme';\nimport { initializeIcons } from '@fluentui/react/lib/Icons';\nimport { SortingDemoView } from './view/sorting/Demo';\nimport { loadTheme } from '@fluentui/react';\n\nexport const App = () => {\n\n\tinitializeIcons();\n\tloadTheme(AppTheme);\n\n\treturn (\n\t\t<div className=\"App\">\n\t\t\t<SortingDemoView />\n\t\t</div>\n\t);\n}\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport { App } from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}