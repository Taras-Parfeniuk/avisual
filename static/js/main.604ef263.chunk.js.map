{"version":3,"sources":["view/AppTheme.ts","view/sorting/ArrayItem.tsx","view/sorting/Array.tsx","view/sorting/Algorythm.tsx","config/sorting.ts","view/sorting/ArrayEditor.tsx","view/sorting/ArrayEditorModal.tsx","view/sorting/ArraySettings.tsx","view/sorting/Demo.tsx","common/EventEmitter.ts","model/sorting/EventBasedSortAlgorythm.ts","model/sorting/bubble/BubbleSort.ts","model/sorting/bubble/BubbleSortAlgorythmFactory.ts","model/sorting/merge/MergeSort.ts","model/sorting/merge/MergeSortAlgorythmFactory.ts","model/sorting/quick/QuickSort.ts","model/sorting/quick/QuickSortAlgorythmFactory.ts","model/sorting/SortingInput.ts","model/sorting/insertion/InsertionSort.ts","model/sorting/insertion/InsertionSortAlgorythmFactory.ts","model/sorting/selection/SelectionSort.ts","model/sorting/selection/SelectionSortAlgorythmFactory.ts","model/sorting/SortingDemoModel.ts","model/AppModel.ts","App.tsx","reportWebVitals.js","index.js"],"names":["AppTheme","createTheme","palette","themePrimary","themeLighterAlt","themeLighter","themeLight","themeTertiary","themeSecondary","themeDarkAlt","themeDark","themeDarker","neutralLighterAlt","neutralLighter","neutralLight","neutralQuaternaryAlt","neutralQuaternary","neutralTertiaryAlt","neutralTertiary","neutralSecondary","neutralPrimaryAlt","neutralPrimary","neutralDark","black","white","ArrayItem","height","isHighlighted","isNegative","classNames","push","className","join","style","Array","array","selection","onClick","max","Math","min","maxHeight","abs","map","item","idx","isSelected","includes","key","AlgorythmView","props","viewId","closeView","isRunning","operationsCount","isFinished","info","items","text","name","href","link","iconProps","iconName","farItems","iconOnly","operationsCountString","CommandBar","ProgressIndicator","progressHidden","Label","length","Icon","demo","minSpeed","maxSpeed","stepInterval","minElement","maxElement","minSize","maxSize","Object","freeze","ArrayEditor","resizeArray","bind","generateRandomArray","state","input","model","i","ArrayElement","toString","arraySize","this","arrayString","TextField","value","onChange","e","v","onInputChange","CommandBarButton","Slider","showValue","config","defaultValue","newValue","arrayElements","split","slice","setArray","setState","newSize","setArraySize","newArray","setRandomArray","stateUpdate","Component","_value","num","Number","trim","isNaN","ArrayEditorModal","isOpen","hide","titleId","useId","Modal","titleAriaId","onDismiss","isBlocking","id","IconButton","ariaLabel","ArraySettings","updateArray","regenerateArray","hideArrayEditor","showArrayEditor","showEditor","enabled","label","disabled","React","SortingDemoView","algorythms","canPlay","canPause","canStop","canAddAlgorythm","demoSpeed","addAlgorythm","removeAlgorythm","changeDemoSpeed","pause","play","stop","onStepExecuted","onInputUpdated","addAlgorythmMenuProps","availableAlgorythms","algorythmName","demoControls","menuProps","canUpdateArray","isPlaying","currentSelection","currentOperationNumber","newSpeed","factory","EventEmitter","_events","_wrappers","Map","handler","event","get","add","set","Set","wrapper","remove","on","has","delete","size","clear","values","STEP_INITIATED_EVENT","EventBasedSortAlgorythm","compare","_eventEmitter","_info","_isFinished","_operationNumber","_selection","_array","_compare","algorythm","finally","emit","indexes","promise","Promise","resolve","reject","once","BubbleSort","bubbleSort","j","setSelection","waitForNextStep","BubbleSortAlgorythmFactory","MergeSort","mergeSort","from","to","middle","floor","highlightRange","merge","leftArray","rightArray","undefined","pickItem","shift","MergeSortAlgorythmFactory","QuickSort","quickSort","partition","low","high","pi","pivot","QuickSortAlgorythmFactory","SORTING_INPUT_UPDATED_EVENT","SortingInput","_arraySize","createArray","trimElement","val","random","el","InsertionSort","insertionSort","InsertionSortAlgorythmFactory","SelectionSort","selectionSort","candidate","SelectionSortAlgorythmFactory","STEP_EXECUTED_EVENT","SortingDemoModel","_compareFunc","a","b","_input","_availableAlgorythms","_algorythms","_stepTimerId","_demoSpeed","_state","onInputUpdatedHandler","executeStep","setInterval","copyWithArray","algo","create","splice","clearInterval","unfinished","filter","forEach","dispose","canUpdateInput","AppModel","_sorting","App","initializeIcons","loadTheme","sorting","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.604ef263.chunk.js","sourcesContent":["import { createTheme } from \"@fluentui/react\";\n\nexport const AppTheme = createTheme({\n    palette: {\n      themePrimary: '#9a93c7',\n      themeLighterAlt: '#fafafd',\n      themeLighter: '#edecf6',\n      themeLight: '#dedcee',\n      themeTertiary: '#bfbbdd',\n      themeSecondary: '#a59fce',\n      themeDarkAlt: '#8b84b3',\n      themeDark: '#757097',\n      themeDarker: '#56526f',\n      neutralLighterAlt: '#faf9f8',\n      neutralLighter: '#f3f2f1',\n      neutralLight: '#edebe9',\n      neutralQuaternaryAlt: '#e1dfdd',\n      neutralQuaternary: '#d0d0d0',\n      neutralTertiaryAlt: '#c8c6c4',\n      neutralTertiary: '#a19f9d',\n      neutralSecondary: '#605e5c',\n      neutralPrimaryAlt: '#3b3a39',\n      neutralPrimary: '#323130',\n      neutralDark: '#201f1e',\n      black: '#000000',\n      white: '#ffffff',\n    }});","import React from \"react\";\n\nexport type ArrayItemParams = { height: number, isHighlighted: boolean, isNegative: boolean }\n\nexport const ArrayItem = ({ height = 100, isHighlighted = false, isNegative = false }: ArrayItemParams) => {\n\n    const classNames = [ 'item' ];\n\n    if (isNegative) {\n\n        classNames.push('item-negative')\n    } else {\n\n        classNames.push('item-positive')\n    }\n\n    if (isHighlighted) {\n\n        classNames.push('highlighted');\n    }\n\n    return (\n        <div className={classNames.join(' ')} style={{ height: `${height}%` }}>\n            <div />\n            <div />\n        </div>\n    );\n}","import React from \"react\";\nimport { ArrayItem } from \"./ArrayItem\";\nimport './Array.css'\n\ntype ArrayProps = { \n    array: number[], \n    selection: number[],\n    onClick?: () => void\n};\n\nexport const Array = ({ array = [], selection = [], onClick }: ArrayProps) => {\n\n    const max = Math.max(...array);\n    const min = Math.min(...array);\n\n    const maxHeight = Math.max(Math.abs(max), Math.abs(min));\n\n    return (\n        <div className='array-container' onClick={onClick}>\n            {\n                array.map((item, idx) => {\n                    \n                    const height = 100 * Math.abs(item) / maxHeight;\n                    const isNegative = item < 0;\n                    const isSelected = selection.includes(idx);\n\n                    return (\n                        <ArrayItem \n                            key={`array-item-${idx}`}\n                            height={height} \n                            isNegative={isNegative} \n                            isHighlighted={isSelected} \n                        />\n                    );\n                })\n            }\n        </div>\n    )\n}\n","import { CommandBar, ICommandBarItemProps, Icon, Label, ProgressIndicator } from \"@fluentui/react\";\nimport React from \"react\";\nimport { AlgorythmInfo } from \"../../model/AlgorythmInfo\";\nimport { Array } from \"./Array\";\nimport './Algorythm.css';\n\ntype AlgoViewProps = { \n    viewId: number,\n    closeView: (viewId: number) => void,\n    array: number[],\n    selection: number[],\n    isFinished: boolean,\n    isRunning: boolean,\n    operationsCount: number,\n    info: AlgorythmInfo\n};\n\nexport const AlgorythmView = (props: AlgoViewProps) => {\n\n    const { \n        array, \n        selection, \n        viewId, \n        closeView, \n        isRunning, \n        operationsCount, \n        isFinished, \n        info \n    } = props;\n\n    const items: ICommandBarItemProps[] = [\n        {\n            key: 'algoTitle',\n            text: info.name,\n            href: info.link,\n            iconProps: { iconName: 'Info' }\n        }\n    ];\n\n    const farItems: ICommandBarItemProps[] = [\n        {\n            key: 'closeBtn',\n            onClick: () => closeView(viewId),\n            iconProps: {\n                iconName: 'ChromeClose'\n            },\n            iconOnly: true\n        }\n    ]\n\n    const operationsCountString = operationsCount > 0\n        ? `~${operationsCount}`\n        : operationsCount;\n\n    return (\n        <div className='algorythm'>\n            <CommandBar items={items} farItems={farItems} />\n            <Array array={array} selection={selection} />\n            <ProgressIndicator progressHidden={!isRunning} />\n            <Label>Items: {array.length} | Operations: {operationsCountString}</Label>\n            {\n                isFinished && (\n                    <Icon iconName='CheckMark' />\n                )\n            }\n        </div>\n    );\n} \n","export const demo = {\n    minSpeed: 1,\n    maxSpeed: 100,\n    stepInterval: 500\n};\n\nexport const array = {\n    minElement: -10,\n    maxElement: 10,\n    minSize: 2,\n    maxSize: 250\n};\n\nObject.freeze(array);\nObject.freeze(demo);\n","import { CommandBarButton, Slider, TextField } from '@fluentui/react';\nimport React from 'react';\nimport { Component } from 'react';\nimport { ISortingInput } from '../../model/sorting/SortingInput';\nimport { Array } from './Array';\nimport { array as config } from \"../../config/sorting\";\nimport './ArrayEditor.css';\n\ntype ArrayEditorProps = {\n    model: ISortingInput\n}\n\ntype ArrayEditorState = {\n    input?: ArrayElement[],\n    arraySize?: number\n}\n\nexport class ArrayEditor extends Component<ArrayEditorProps, ArrayEditorState> {\n\n    constructor(props: ArrayEditorProps) {\n\n        super(props);\n\n        this.resizeArray = this.resizeArray.bind(this);\n        this.generateRandomArray = this.generateRandomArray.bind(this);\n\n        this.state = { \n            input: props.model.array.map(i => new ArrayElement(i.toString())), \n            arraySize: props.model.arraySize \n        };\n    }\n\n    render() {\n\n        const { model } = this.props;\n        const { input = [], arraySize } = this.state;\n\n        const arrayString = input.map(i => i.toString()).join(\",\");\n\n        return (\n            <div className=\"array-editor\">\n                <div className=\"elements-input\">\n                    <TextField\n                        value={arrayString}\n                        onChange={(e, v) => this.onInputChange(e, v)}\n                    />\n                    <CommandBarButton \n                        iconProps={{ iconName:\"Refresh\" }} \n                        onClick={this.generateRandomArray}\n                    />\n                </div>\n                <Slider \n                    showValue \n                    min={config.minSize} \n                    max={config.maxSize} \n                    defaultValue={model.arraySize} \n                    value={arraySize}\n                    onChange={this.resizeArray}\n                />\n                <Array array={model.array} selection={[]} />\n            </div>\n        );\n    }\n\n    private onInputChange(e: React.FormEvent<HTMLInputElement | HTMLTextAreaElement>, newValue: string = \"\"): void {\n\n        const { model } = this.props;\n        \n        const arrayElements = newValue.split(\",\")\n            .map(i => new ArrayElement(i))\n            .slice(0, config.maxSize);\n\n        model.setArray(arrayElements.map(i => i.value));\n\n        this.setState({ input: arrayElements, arraySize: model.arraySize });\n    }\n\n    private resizeArray(newSize: number): void {\n\n        const { model } = this.props;\n        const { input = [] } = this.state;\n\n        model.setArraySize(newSize);\n\n        const newArray = [];\n\n        for (let i = 0; i < model.arraySize; i++) {\n\n            if (i < input.length) newArray.push(input[i]);\n            else newArray.push(new ArrayElement(\"0\"));\n        }\n\n        model.setArray(newArray.map(i => i.value));\n\n        this.setState({ input: newArray, arraySize: model.arraySize });\n    }\n\n    private generateRandomArray(): void {\n\n        const { model } = this.props;\n\n        model.setRandomArray();\n\n        const arrayElements = model.array.map(i => new ArrayElement(i.toString()));\n\n        const stateUpdate = {\n            input: arrayElements,\n        };\n\n        this.setState(stateUpdate);\n    }\n}\n\nclass ArrayElement {\n    \n    private _value: string;\n\n    constructor (value: string) {\n\n        this._value = value;\n    }\n\n    public get value(): number {\n\n        const num = Number(this._value.trim());\n\n        return Number.isNaN(num) ? 0 : num;\n    }\n\n    public toString(): string {\n\n        return this._value;\n    } \n}","import { IconButton, Modal } from \"@fluentui/react\";\nimport React from \"react\";\nimport { ISortingInput } from \"../../model/sorting/SortingInput\";\nimport { ArrayEditor } from \"./ArrayEditor\";\nimport { useId } from '@uifabric/react-hooks';\nimport \"./ArrayEditorModal.css\";\n\ntype ArrayEditorModalProps = {\n    isOpen: boolean,\n    model: ISortingInput,\n    hide: () => void\n}\n\nexport const ArrayEditorModal: React.FunctionComponent<ArrayEditorModalProps> = ({ isOpen, model, hide }) => {\n\n    const titleId = useId('title');\n  \n    return (\n        <Modal\n          titleAriaId={titleId}\n          isOpen={isOpen}\n          onDismiss={hide}\n          isBlocking={false}\n        >\n          <div className=\"modal-header\">\n            <span id={titleId}>Edit source array</span>\n            <IconButton\n              iconProps={{ iconName: 'Cancel' }}\n              ariaLabel=\"Close array editor\"\n              onClick={hide}\n            />\n          </div>\n          <div className=\"modal-body\">\n            <ArrayEditor model={model} />\n          </div>\n        </Modal>\n    );\n  };\n","import { CommandBarButton, Slider } from \"@fluentui/react\";\nimport React from \"react\";\nimport './ArraySettings.css';\nimport { Array } from \"./Array\";\nimport { array as config } from \"../../config/sorting\";\nimport { ISortingInput } from \"../../model/sorting/SortingInput\";\nimport { ArrayEditorModal } from \"./ArrayEditorModal\";\n\n\ntype ArraySettingsProps = { \n    model: ISortingInput,\n    enabled: boolean\n};\n\ntype ArraySettingsState = { \n    array: number[],\n    arraySize: number,\n    showEditor: boolean\n};\n\nexport class ArraySettings extends React.Component<ArraySettingsProps, ArraySettingsState> {\n    \n    constructor(props: ArraySettingsProps) {\n\n        super(props);\n\n        const { model } = props;\n\n        this.updateArray = this.updateArray.bind(this);\n        this.regenerateArray = this.regenerateArray.bind(this);\n        this.hideArrayEditor = this.hideArrayEditor.bind(this);\n        this.showArrayEditor = this.showArrayEditor.bind(this);\n\n        model.setRandomArray();\n\n        this.state = { \n            arraySize: model.arraySize,\n            array: model.array,\n            showEditor: false\n        };\n    }\n\n    render() {\n\n        const { enabled, model } = this.props;\n        const { array, arraySize, showEditor } = this.state;\n\n        const classNames = ['array-settings-toolbar'];\n        \n        if (!enabled) classNames.push('disabled');\n        \n        return (\n            <div className={classNames.join(' ')}>\n                <Slider \n                    showValue \n                    label='Array size' \n                    min={config.minSize} \n                    max={config.maxSize} \n                    defaultValue={model.arraySize} \n                    value={arraySize}\n                    onChange={this.updateArray}\n                    disabled={!enabled}\n                />\n                <Array array={array} selection={[]} onClick={this.showArrayEditor} />\n                <CommandBarButton \n                    iconProps={{ iconName:\"Refresh\" }} \n                    onClick={this.regenerateArray} \n                    disabled={!enabled} \n                />\n                <ArrayEditorModal model={model} isOpen={showEditor} hide={this.hideArrayEditor} />\n            </div>\n        );\n    }\n\n    private updateArray(newSize: number): void {\n\n        const { model } = this.props;\n\n        model.setArraySize(newSize);\n        model.setRandomArray();\n\n        const stateUpdate = {\n            arraySize: model.arraySize,\n            array: model.array\n        };\n\n        this.setState(stateUpdate);\n    }\n\n    private regenerateArray(): void {\n\n        const { model } = this.props;\n\n        model.setRandomArray();\n\n        const stateUpdate = {\n            array: model.array\n        };\n\n        this.setState(stateUpdate);\n    }\n\n    private hideArrayEditor(): void {\n\n        const { model } = this.props;\n\n        const stateUpdate = {\n            arraySize: model.arraySize,\n            array: model.array,\n            showEditor: false\n        };\n\n        this.setState(stateUpdate);\n    }\n\n    private showArrayEditor(): void {\n\n        const { enabled } = this.props;\n\n        if (enabled) this.setState({ showEditor: true });\n    }\n}\n","import { CommandBar, CommandBarButton, ICommandBarItemProps, Slider } from \"@fluentui/react\";\nimport React from \"react\";\nimport { SortingDemoModel } from \"../../model/sorting/SortingDemoModel\";\nimport { ISortAlgorythm, ISortAlgorythmFactory } from \"../../model/sorting/ISortAlgorythm\";\nimport { AlgorythmView } from \"./Algorythm\";\nimport { ArraySettings } from \"./ArraySettings\";\nimport './Demo.css';\nimport * as config from \"../../config/sorting\";\n\ntype SortingDemoViewProps = {\n    model: SortingDemoModel\n}\n\ntype SortingDemoViewState = {\n    canPlay?: boolean,\n    canPause?: boolean,\n    canStop?: boolean,\n    canAddAlgorythm?: boolean, \n    demoSpeed?: number,\n    algorythms?: ISortAlgorythm<number>[]\n}\n\nexport class SortingDemoView extends React.Component<SortingDemoViewProps, SortingDemoViewState> {\n\n    constructor(props: SortingDemoViewProps) {\n\n        super(props);\n\n        const model = props.model;\n\n        this.state = {\n            algorythms: model.algorythms,\n            canPlay: model.canPlay,\n            canPause: model.canPause,\n            canStop: model.canStop,\n            canAddAlgorythm: model.canAddAlgorythm,\n            demoSpeed: model.demoSpeed\n        };\n\n        this.addAlgorythm = this.addAlgorythm.bind(this);\n        this.removeAlgorythm = this.removeAlgorythm.bind(this);\n        this.changeDemoSpeed = this.changeDemoSpeed.bind(this);\n        this.pause = this.pause.bind(this);\n        this.play = this.play.bind(this);\n        this.stop = this.stop.bind(this);\n    }\n\n    componentDidMount() {\n\n        const { model } = this.props;\n\n        model.onStepExecuted(() => { \n            \n            const stateUpdate: SortingDemoViewState = {\n                algorythms: model.algorythms,\n                canPlay: model.canPlay,\n                canPause: model.canPause,\n                canStop: model.canStop,\n                canAddAlgorythm: model.canAddAlgorythm\n            }\n    \n            this.setState(stateUpdate);\n        });\n\n        model.onInputUpdated(() => {\n\n            const stateUpdate: SortingDemoViewState = {\n                algorythms: model.algorythms,\n                canPlay: model.canPlay,\n                canPause: model.canPause,\n                canStop: model.canStop,\n                canAddAlgorythm: model.canAddAlgorythm\n            };\n\n            this.setState(stateUpdate);\n        });\n    }\n\n    render() {\n\n        const { model } = this.props;\n        const { \n            demoSpeed, \n            canAddAlgorythm, \n            canPlay, \n            canStop, \n            canPause, \n            algorythms = [],\n        } = this.state;\n\n        const addAlgorythmMenuProps = {\n            items: model.availableAlgorythms.map(i => ({\n                key: `add-algo_${i.algorythmName}`,\n                text: i.algorythmName,\n                onClick: () => this.addAlgorythm(i)\n            }))\n        };\n\n        const demoControls: ICommandBarItemProps[] = [\n            {\n                key: 'playDemo',\n                iconProps: { iconName: 'Play' },\n                disabled: !canPlay,\n                iconOnly: true,\n                onClick: this.play.bind(model)\n            },\n            {\n                key: 'pauseDemo',\n                iconProps: { iconName: 'Pause' },\n                disabled: !canPause,\n                iconOnly: true,\n                onClick: this.pause.bind(model)\n            },\n            {\n                key: 'stopDemo',\n                iconProps: { iconName: 'Stop' },\n                disabled: !canStop,\n                iconOnly: true,\n                onClick: this.stop.bind(model)\n            }\n        ];\n\n        return (\n            <div className='demo-view'>\n                <div className='demo-settings-toolbar'>\n                    <CommandBarButton text='Add algorythm'\n                        iconProps={{ iconName: 'Add' }}\n                        disabled={!canAddAlgorythm}\n                        menuProps={addAlgorythmMenuProps} />\n                    <CommandBar items={demoControls} />\n                    <Slider \n                        showValue \n                        label='Demo speed' \n                        min={config.demo.minSpeed} \n                        max={config.demo.maxSpeed} \n                        defaultValue={model.demoSpeed} \n                        onChange={this.changeDemoSpeed}\n                        value={demoSpeed}\n                    />\n                </div>\n                <ArraySettings\n                    enabled={model.canUpdateArray}\n                    model={model.input}\n                />\n                <div className='algorythms-container'>\n                {\n                    algorythms.map((i, idx) => {\n                        \n                        const isRunning = model.isPlaying && !i.isFinished;\n\n                        return (\n                            <AlgorythmView\n                                viewId={idx}\n                                array={i.array}\n                                selection={i.currentSelection}\n                                isRunning={isRunning}\n                                isFinished={i.isFinished}\n                                closeView={this.removeAlgorythm}\n                                operationsCount={i.currentOperationNumber}\n                                info={i.info}\n                            />\n                        );\n                    })\n                }\n                </div>\n            </div>\n        );\n    }\n\n    private changeDemoSpeed(newSpeed: number): void {\n\n        const { model } = this.props;\n\n        model.changeDemoSpeed(newSpeed);\n\n        const stateUpdate: SortingDemoViewState = {\n            demoSpeed: model.demoSpeed\n        }\n\n        this.setState(stateUpdate);\n    }\n\n    private addAlgorythm(factory: ISortAlgorythmFactory<number>): void {\n\n        const { model } = this.props;\n\n        model.addAlgorythm(factory);\n\n        const stateUpdate: SortingDemoViewState = {\n            algorythms: model.algorythms,\n            canPlay: model.canPlay,\n            canPause: model.canPause,\n            canStop: model.canStop,\n            canAddAlgorythm: model.canAddAlgorythm\n        }\n\n        this.setState(stateUpdate);\n    }\n\n    private removeAlgorythm(id: number): void {\n\n        const { model } = this.props;\n\n        model.removeAlgorythm(id);\n        \n        const stateUpdate: SortingDemoViewState = {\n            algorythms: model.algorythms\n        }\n\n        this.setState(stateUpdate);\n    }\n\n    \n    private play(): void {\n\n        const { model } = this.props;\n\n        model.play();\n        \n        const stateUpdate: SortingDemoViewState = {\n            canPlay: model.canPlay,\n            canPause: model.canPause,\n            canStop: model.canStop,\n            canAddAlgorythm: model.canAddAlgorythm\n        }\n\n        this.setState(stateUpdate);\n    }\n\n    private pause(): void {\n\n        const { model } = this.props;\n\n        model.pause();\n        \n        const stateUpdate: SortingDemoViewState = {\n            canPlay: model.canPlay,\n            canPause: model.canPause,\n            canStop: model.canStop,\n            canAddAlgorythm: model.canAddAlgorythm\n        }\n\n        this.setState(stateUpdate);\n    }\n\n    private stop(): void {\n\n        const { model } = this.props;\n\n        model.stop();\n        \n        const stateUpdate: SortingDemoViewState = {\n            canPlay: model.canPlay,\n            canPause: model.canPause,\n            canStop: model.canStop,\n            canAddAlgorythm: model.canAddAlgorythm\n        }\n\n        this.setState(stateUpdate);\n    }\n}\n","export class EventEmitter {\n\n    private readonly _events: Map<string, Set<() => void>>;\n    private readonly _wrappers: Map<() => void, () => void>;\n\n    constructor() {\n\n        this._events = new Map<string, Set<() => void>>();\n        this._wrappers = new Map<() => void, () => void>();\n    }\n\n    on(name: string, handler: () => void) {\n\n        const event = this._events.get(name);\n\n        if (event)\n            event.add(handler);\n        else\n            this._events.set(name, new Set([handler]));\n    }\n\n    once(name: string, handler: () => void) {\n\n        const wrapper = () => {\n\n            this.remove(name, wrapper);\n            handler();\n        };\n\n        this._wrappers.set(handler, wrapper);\n        this.on(name, wrapper);\n    }\n\n    remove(name: string, handler: () => void) {\n\n        const event = this._events.get(name);\n\n        if (!event)\n            return;\n\n        if (event.has(handler))\n            event.delete(handler);\n        else {\n\n            const wrapper = this._wrappers.get(handler);\n\n            if (wrapper) {\n\n                event.delete(wrapper);\n                this._wrappers.delete(wrapper);\n            }\n        }\n\n        if (event.size === 0)\n            this._events.delete(name);\n    }\n\n    clear() {\n\n        this._events.clear();\n        this._wrappers.clear();\n    }\n\n    emit(name: string) {\n\n        const event = this._events.get(name);\n\n        if (!event)\n            return;\n\n        for (const handler of event.values()) {\n\n            handler();\n        }\n    }\n}\n","import { EventEmitter } from \"events\";\nimport { AlgorythmInfo } from \"../AlgorythmInfo\";\nimport { ISortAlgorythm } from \"./ISortAlgorythm\";\n\nconst STEP_INITIATED_EVENT = \"STEP_INITIATED_EVENT\";\n\nexport abstract class EventBasedSortAlgorythm<T> implements ISortAlgorythm<T> {\n\n    private readonly _eventEmitter: EventEmitter;\n    private readonly _info: AlgorythmInfo;\n\n    private _isFinished: boolean;\n    private _operationNumber: number;\n    private _selection: number[];\n\n    protected readonly _array: T[];\n    protected readonly _compare: (a: T, b: T) => number;\n    \n    constructor(array: T[], compare: (a: T, b: T) => number, info: AlgorythmInfo) {\n\n        this._array = [...array];\n        this._compare = compare;\n        this._eventEmitter = new EventEmitter();\n        this._isFinished = false;\n        this._operationNumber = 0;\n        this._selection = [];\n        this._info = info;\n\n        this.algorythm()\n            .finally(() => { this._isFinished = true; })\n    }\n    \n    \n    public abstract copyWithArray(array: T[]): ISortAlgorythm<T>;\n    protected abstract algorythm(): Promise<void>;\n\n    public get info(): AlgorythmInfo {\n\n        return this._info;\n    }\n\n    public get array(): T[] {\n\n        return this._array;\n    }\n    \n    public get currentSelection(): number[] {\n\n        return this._selection;\n    }\n\n    public get isFinished(): boolean {\n\n        return this._isFinished;\n    }\n    \n    public get currentOperationNumber(): number {\n\n        return this._operationNumber;\n    }\n\n    public executeStep(): void {\n        \n        this._eventEmitter.emit(STEP_INITIATED_EVENT);\n        this._operationNumber++;\n    }\n\n    protected setSelection(indexes: number[]): void {\n\n        this._selection = indexes;\n    }\n\n    protected async waitForNextStep(): Promise<void> {\n\n        const promise = new Promise<void>((resolve, reject) => {\n\n            this._eventEmitter.once(STEP_INITIATED_EVENT, () => resolve());\n        });\n\n        return promise;\n    }\n}\n","import { ISortAlgorythm } from '../ISortAlgorythm';\nimport { EventBasedSortAlgorythm } from '../EventBasedSortAlgorythm';\n\nexport class BubbleSort<T> extends EventBasedSortAlgorythm<T> implements ISortAlgorythm<T> {\n\n    constructor(array: T[], compare: (a: T, b: T) => number) {\n\n         super(array, compare, { name: \"bubble sort\", link: \"https://en.wikipedia.org/wiki/Bubble_sort\" });\n    }\n\n    protected algorythm(): Promise<void> {\n        \n        return this.bubbleSort();\n    }\n\n    private async bubbleSort(): Promise<void> {\n\n        if (this._array.length < 2) {\n\n            return;\n        }\n\n        for (let i = this._array.length; i >= 0; i--) {\n\n            for (let j = 1; j < i; j++) {\n\n                this.setSelection([ j, j - 1 ]);\n\n                await this.waitForNextStep();\n\n                if (this._compare(this._array[j - 1], this._array[j]) > 0) {\n\n                    await this.waitForNextStep();\n\n                    [ this._array[j - 1], this._array[j] ] = [ this._array[j], this._array[j - 1] ];\n                }\n            }\n        }\n    }\n\n    public copyWithArray(array: T[]): ISortAlgorythm<T> {\n\n        return new BubbleSort<T>(array, this._compare);\n    }\n}","import { ISortAlgorythm, ISortAlgorythmFactory } from \"../ISortAlgorythm\";\nimport { BubbleSort } from \"./BubbleSort\";\n\nexport class BubbleSortAlgorythmFactory<T> implements ISortAlgorythmFactory<T> {\n    \n    private readonly _compare: (a: T, b: T) => number;\n\n    constructor(compare: (a: T, b: T) => number) {\n\n        this._compare = compare;\n    }\n\n    public get algorythmName(): string {\n\n        return \"bubble sort\";\n    }\n    \n    create(array: T[]): ISortAlgorythm<T> {\n\n        return new BubbleSort(array, this._compare);\n    }\n}","import { EventBasedSortAlgorythm } from \"../EventBasedSortAlgorythm\";\nimport { ISortAlgorythm } from \"../ISortAlgorythm\";\n\nexport class MergeSort<T> extends EventBasedSortAlgorythm<T> implements ISortAlgorythm<T> {\n\n    constructor(array: T[], compare: (a: T, b: T) => number) {\n        \n        super(array, compare, { name: \"merge sort\", link: \"https://en.wikipedia.org/wiki/Merge_sort\" });\n    }\n\n    public copyWithArray(array: T[]): ISortAlgorythm<T> {\n        \n        return new MergeSort<T>(array, this._compare);\n    }\n\n    protected algorythm(): Promise<void> {\n\n        return this.mergeSort(0, this._array.length - 1);\n    }\n\n    private async mergeSort(from: number, to: number): Promise<void> {\n\n        if (from < to) {\n\n            await this.waitForNextStep();\n            const middle = Math.floor(from + (to - from) / 2);\n            this.setSelection([ middle ]);\n            \n            this.highlightRange(from, middle);\n            await this.waitForNextStep();\n            await this.mergeSort(from, middle);\n            \n            this.highlightRange(middle + 1, to);\n            await this.waitForNextStep();\n            await this.mergeSort(middle + 1, to);\n\n            this.setSelection([from, to]);\n            await this.waitForNextStep();\n            await this.merge(from, middle, to);\n        }\n    }\n\n    private async merge(from: number, middle: number, to: number): Promise<void> {\n\n        const leftArray: T[] = [];\n        const rightArray: T[] = [];\n\n        for (let i = from; i <= to; i++) {\n\n            this.setSelection([from, to, i]);\n            await this.waitForNextStep();\n\n            if (i > middle) {\n            \n                await this.waitForNextStep();\n                rightArray.push(this._array[i]);\n            } \n            else {\n\n                await this.waitForNextStep();\n                leftArray.push(this._array[i]);\n            }\n        }\n\n        let i = from;\n        await this.waitForNextStep();\n        while (leftArray.length > 0 || rightArray.length > 0) {\n\n            await this.waitForNextStep();\n            const item = this.pickItem(leftArray, rightArray);\n                \n            if (item !== undefined) {\n\n                this.setSelection([from, to, i]);\n                this._array[i] = item;\n            }\n\n            await this.waitForNextStep();\n            i++;\n        }\n    }\n\n    private pickItem(leftArray: T[], rightArray: T[]): T | undefined {\n\n        if (leftArray.length > 0 && rightArray.length > 0) {\n\n            return this._compare(leftArray[0], rightArray[0]) <= 0\n                ? leftArray.shift()\n                : rightArray.shift();\n        }\n\n        if (leftArray.length < 1) {\n\n            return rightArray.shift();\n        }\n\n        return leftArray.shift();\n    }\n\n    private highlightRange(from: number, to: number): void {\n\n        const selection = [];\n\n        for (let i = from; i <= to; i++) {\n\n            selection.push(i);\n        }\n\n        this.setSelection(selection);\n    }\n}","import { ISortAlgorythm, ISortAlgorythmFactory } from \"../ISortAlgorythm\";\nimport { MergeSort } from \"./MergeSort\";\n\nexport class MergeSortAlgorythmFactory<T> implements ISortAlgorythmFactory<T> {\n    \n    private readonly _compare: (a: T, b: T) => number;\n\n    constructor(compare: (a: T, b: T) => number) {\n\n        this._compare = compare;\n    }\n\n    public get algorythmName(): string {\n\n        return \"merge sort\";\n    }\n    \n    create(array: T[]): ISortAlgorythm<T> {\n\n        return new MergeSort(array, this._compare);\n    }\n}","import { EventBasedSortAlgorythm } from \"../EventBasedSortAlgorythm\";\nimport { ISortAlgorythm } from \"../ISortAlgorythm\";\n\nexport class QuickSort<T> extends EventBasedSortAlgorythm<T> implements ISortAlgorythm<T> {\n    \n    constructor(array: T[], compare: (a: T, b: T) => number) {\n        \n        super(array, compare, { name: \"quick sort\", link: \"https://en.wikipedia.org/wiki/Quick_sort\" });\n\n        this.quickSort = this.quickSort.bind(this);\n        this.partition = this.partition.bind(this);\n    }\n\n    public copyWithArray(array: T[]): ISortAlgorythm<T> {\n        \n        return new QuickSort(array, this._compare);\n    }\n\n    protected algorythm(): Promise<void> {\n        \n        return this.quickSort(0, this._array.length - 1);\n    }\n\n    private async quickSort(low: number, high: number): Promise<void> {\n\n        if (low < high) \n        { \n            await this.waitForNextStep();\n\n            const pi = await this.partition(low, high); \n            \n            await this.waitForNextStep();\n            \n            await this.quickSort(low, pi - 1); \n            \n            await this.waitForNextStep();\n            \n            await this.quickSort(pi + 1, high); \n        }  \n    }\n\n    private async partition(low: number, high: number): Promise<number> { \n\n        const pivot = this._array[high];  \n\n        this.setSelection([ high ]);\n\n        await this.waitForNextStep();\n\n        let i = (low - 1);  \n\n        await this.waitForNextStep();\n\n        for (let j = low; j < high; j++) { \n  \n            this.setSelection([ high, j, i ]);\n\n            await this.waitForNextStep();\n\n            if (this._array[j] < pivot) { \n\n                await this.waitForNextStep();\n\n                i++; \n\n                await this.waitForNextStep();\n\n                [ this._array[i], this._array[j] ] = [ this._array[j], this._array[i] ];\n            } \n        } \n\n        await this.waitForNextStep();\n\n        this.setSelection([ high, i + 1 ]);\n        [ this._array[i + 1], this._array[high] ] = [ this._array[high], this._array[i + 1] ];\n\n        await this.waitForNextStep();\n\n        return i + 1; \n    } \n}\n","import { ISortAlgorythm, ISortAlgorythmFactory } from \"../ISortAlgorythm\";\nimport { QuickSort } from \"./QuickSort\";\n\nexport class QuickSortAlgorythmFactory<T> implements ISortAlgorythmFactory<T> {\n    \n    private readonly _compare: (a: T, b: T) => number;\n\n    constructor(compare: (a: T, b: T) => number) {\n\n        this._compare = compare;\n    }\n\n    public get algorythmName(): string {\n\n        return \"quick sort\";\n    }\n    \n    create(array: T[]): ISortAlgorythm<T> {\n\n        return new QuickSort(array, this._compare);\n    }\n}","import { EventEmitter } from \"../../common/EventEmitter\";\nimport { IDisposible } from \"../../common/IDisposible\";\nimport { array as config } from \"../../config/sorting\";\n\nconst SORTING_INPUT_UPDATED_EVENT = \"ON_SORTING_INPUT_UPDATED\";\n\nexport interface ISortingInput {\n\n    array: number[];\n\n    arraySize: number;\n\n    setArraySize(size: number): void;\n    \n    setRandomArray(): void;\n\n    setArray(array: number[]): void;\n}\n\nexport class SortingInput implements ISortingInput, IDisposible {\n\n    private readonly _eventEmitter: EventEmitter;\n\n    private _arraySize: number = 10;\n    private _array: number[] = [];\n\n    constructor() {\n\n        this._eventEmitter = new EventEmitter();\n        this.setRandomArray();\n    }\n\n    public get array(): number[] {\n\n        return this._array;\n    }\n\n    public get arraySize(): number {\n\n        return this._arraySize;\n    }\n\n    public setArraySize(size: number): void {\n\n        if (size <= config.minSize || size >= config.maxSize) {\n\n            return;\n        }\n\n        this._arraySize = size;\n\n        this.setRandomArray();\n    }\n\n    public setRandomArray(): void {\n\n        this._array = this.createArray(this._arraySize, config.minElement, config.maxElement);\n\n        this._eventEmitter.emit(SORTING_INPUT_UPDATED_EVENT);\n    }\n\n    public setArray(array: number[]): void {\n\n        if (array.length >= config.minSize && array.length <= config.maxSize) {\n\n            this._array = array.map(this.trimElement);\n            this._arraySize = this._array.length;\n        } \n\n        this._eventEmitter.emit(SORTING_INPUT_UPDATED_EVENT);\n    }\n\n    public onInputUpdated(handler: () => void): void {\n\n        this._eventEmitter.on(SORTING_INPUT_UPDATED_EVENT, handler);\n    }\n\n    private createArray(size: number, min: number, max: number): number[] {\n\n        const array = [];\n\n        for (let i = 0; i < size; i++) {\n\n            const val = Math.floor(Math.random() * (max - min + 1)) + min;\n\n            array.push(val);\n        }\n\n        return array;\n    }\n\n    private trimElement(el: number): number {\n\n        if (el > config.maxElement) {\n\n            return config.maxElement;\n        }\n\n        if (el < config.minElement) {\n\n            return config.minElement;\n        }\n\n        return el;\n    }\n\n    public dispose(): void {\n\n        this._eventEmitter.clear();\n    }\n}\n\nexport function withGuard(canUpdateInput: () => boolean, model: ISortingInput): ISortingInput {\n\n    return {\n        get array(): number[] { return model.array; },\n        get arraySize(): number { return model.arraySize; },\n        setArray: (...args) => { if (canUpdateInput()) { model.setArray.bind(model)(...args) }},\n        setArraySize: (...args) => { if (canUpdateInput()) { model.setArraySize.bind(model)(...args) } },\n        setRandomArray: (...args) => { if (canUpdateInput()) { model.setRandomArray.bind(model)(...args) } }\n    };\n}\n","import { ISortAlgorythm } from '../ISortAlgorythm';\nimport { EventBasedSortAlgorythm } from '../EventBasedSortAlgorythm';\n\nexport class InsertionSort<T> extends EventBasedSortAlgorythm<T> implements ISortAlgorythm<T> {\n\n    constructor(array: T[], compare: (a: T, b: T) => number) {\n\n         super(array, compare, { name: \"insertion sort\", link: \"https://en.wikipedia.org/wiki/Insertion_sort\" });\n    }\n\n    protected algorythm(): Promise<void> {\n        \n        return this.insertionSort();\n    }\n\n    private async insertionSort(): Promise<void> {\n\n        if (this._array.length < 2) {\n\n            return;\n        }\n\n        for (let i = 1; i < this._array.length; i++) {\n\n            this.setSelection([ i ]);\n\n            await this.waitForNextStep();\n            \n            let j = i - 1;\n\n            await this.waitForNextStep();\n\n            while (j >= 0 && this._compare(this._array[j + 1], this._array[j]) < 0) {\n\n                await this.waitForNextStep();\n\n                this.setSelection([ j + 1, j, i ]);\n\n                [ this._array[j + 1], this._array[j] ] = [ this._array[j], this._array[j + 1] ];\n                \n                await this.waitForNextStep();\n                \n                j--;\n            }\n        }\n    }\n\n    public copyWithArray(array: T[]): ISortAlgorythm<T> {\n\n        return new InsertionSort<T>(array, this._compare);\n    }\n}","import { ISortAlgorythm, ISortAlgorythmFactory } from \"../ISortAlgorythm\";\nimport { InsertionSort } from \"./InsertionSort\";\n\nexport class InsertionSortAlgorythmFactory<T> implements ISortAlgorythmFactory<T> {\n    \n    private readonly _compare: (a: T, b: T) => number;\n\n    constructor(compare: (a: T, b: T) => number) {\n\n        this._compare = compare;\n    }\n\n    public get algorythmName(): string {\n\n        return \"insertion sort\";\n    }\n    \n    create(array: T[]): ISortAlgorythm<T> {\n\n        return new InsertionSort(array, this._compare);\n    }\n}","import { ISortAlgorythm } from '../ISortAlgorythm';\nimport { EventBasedSortAlgorythm } from '../EventBasedSortAlgorythm';\n\nexport class SelectionSort<T> extends EventBasedSortAlgorythm<T> implements ISortAlgorythm<T> {\n\n    constructor(array: T[], compare: (a: T, b: T) => number) {\n\n         super(array, compare, { name: \"selection sort\", link: \"https://en.wikipedia.org/wiki/Selection_sort\" });\n    }\n\n    protected algorythm(): Promise<void> {\n        \n        return this.selectionSort();\n    }\n\n    private async selectionSort(): Promise<void> {\n\n        if (this._array.length < 2) {\n\n            return;\n        }\n\n        for (let i = 0; i < this._array.length; i++) {\n\n            this.setSelection([ i ]);\n            await this.waitForNextStep();\n\n            let candidate = i;\n\n            await this.waitForNextStep();\n\n            for (let j = i + 1; j < this._array.length; j++) {\n                \n                this.setSelection([ i, j, candidate ]);\n                await this.waitForNextStep();\n\n                if (this._compare(this._array[j], this._array[candidate]) < 0) {\n\n                    await this.waitForNextStep();\n                    candidate = j;\n                    this.setSelection([ i, candidate ]);\n                }\n            }\n\n            await this.waitForNextStep();\n            [ this._array[candidate], this._array[i] ] = [ this._array[i], this._array[candidate] ];\n        }\n    }\n\n    public copyWithArray(array: T[]): ISortAlgorythm<T> {\n\n        return new SelectionSort<T>(array, this._compare);\n    }\n}","import { ISortAlgorythm, ISortAlgorythmFactory } from \"../ISortAlgorythm\";\nimport { SelectionSort } from \"./SelectionSort\";\n\nexport class SelectionSortAlgorythmFactory<T> implements ISortAlgorythmFactory<T> {\n    \n    private readonly _compare: (a: T, b: T) => number;\n\n    constructor(compare: (a: T, b: T) => number) {\n\n        this._compare = compare;\n    }\n\n    public get algorythmName(): string {\n\n        return \"selection sort\";\n    }\n    \n    create(array: T[]): ISortAlgorythm<T> {\n\n        return new SelectionSort(array, this._compare);\n    }\n}","import { EventEmitter } from \"../../common/EventEmitter\";\nimport { BubbleSortAlgorythmFactory } from \"./bubble/BubbleSortAlgorythmFactory\";\nimport { ISortAlgorythmFactory, ISortAlgorythm } from \"./ISortAlgorythm\";\nimport { MergeSortAlgorythmFactory } from \"./merge/MergeSortAlgorythmFactory\";\nimport { QuickSortAlgorythmFactory } from \"./quick/QuickSortAlgorythmFactory\";\nimport { ISortingInput, SortingInput, withGuard } from \"./SortingInput\";\nimport { demo as config } from \"../../config/sorting\";\nimport { IDisposible } from \"../../common/IDisposible\";\nimport { InsertionSortAlgorythmFactory } from \"./insertion/InsertionSortAlgorythmFactory\";\nimport { SelectionSortAlgorythmFactory } from \"./selection/SelectionSortAlgorythmFactory\";\n\nconst STEP_EXECUTED_EVENT = \"ON_STEP_EXECUTED_EVENT\";\n\ntype DemoState = \"PLAYING\" | \"PAUSED\" | \"STOPPED\";\n\nexport class SortingDemoModel implements IDisposible {\n\n    private readonly _compareFunc = (a: number, b: number) => a - b\n    private readonly _input: SortingInput;\n    private readonly _availableAlgorythms: ISortAlgorythmFactory<number>[];\n    private readonly _eventEmitter: EventEmitter;\n\n    private _algorythms: ISortAlgorythm<number>[];\n    private _stepTimerId: any;\n    private _demoSpeed: number;\n    private _state: DemoState;\n\n    constructor() {\n\n        this._input = new SortingInput();\n        this._input.onInputUpdated(this.onInputUpdatedHandler.bind(this));\n\n        this._availableAlgorythms = [\n            new BubbleSortAlgorythmFactory(this._compareFunc),\n            new MergeSortAlgorythmFactory(this._compareFunc),\n            new QuickSortAlgorythmFactory(this._compareFunc),\n            new InsertionSortAlgorythmFactory(this._compareFunc),\n            new SelectionSortAlgorythmFactory(this._compareFunc)\n        ];\n        this._algorythms = [];\n        this._state = \"STOPPED\";\n        this._eventEmitter = new EventEmitter();\n\n        this._demoSpeed = 10;\n        this.executeStep = this.executeStep.bind(this);\n\n        this._stepTimerId = setInterval(this.executeStep, config.stepInterval / this._demoSpeed);\n    }\n\n    public get input(): ISortingInput {\n\n        return withGuard(() => this.canUpdateArray, this._input);\n    }\n\n    public get algorythms(): ISortAlgorythm<number>[] {\n\n        return this._algorythms;\n    }\n\n    public get isPlaying(): boolean {\n\n        return this._state === \"PLAYING\";\n    }\n\n    public get canPlay(): boolean {\n\n        return this._algorythms.length > 0 && (this._state === \"PAUSED\" || this._state === \"STOPPED\");\n    }\n\n    public play(): void {\n\n        if (this.canPlay) {\n\n            if (this._state === \"STOPPED\") {\n    \n                this._algorythms = this._algorythms.map(i => i.copyWithArray(this._input.array));\n            }\n\n            this._state = \"PLAYING\";\n        }\n    }\n    \n    public get canPause(): boolean {\n\n        return this._state === \"PLAYING\";\n    }\n\n    public pause(): void {\n\n        if (this.canPause) {\n\n            this._state = \"PAUSED\";\n        }\n    }\n    \n    public get canStop(): boolean {\n\n        return this._state === \"PLAYING\" || this._state === \"PAUSED\";\n    }\n\n    public stop(): void {\n\n        if (this.canStop) {\n\n            this._state = \"STOPPED\";\n        }\n    }\n\n    public get canUpdateArray(): boolean {\n\n        return this._state === \"STOPPED\";\n    }\n\n    public get availableAlgorythms(): ISortAlgorythmFactory<number>[] {\n\n        return this._availableAlgorythms;\n    }\n\n    public get canAddAlgorythm(): boolean {\n\n        return this._state === \"STOPPED\";\n    }\n\n    public addAlgorythm(factory: ISortAlgorythmFactory<number>): void {\n\n        const algo = factory.create(this._input.array);\n\n        this._algorythms.push(algo);\n    }\n\n    public removeAlgorythm(id: number): void {\n\n        this._algorythms.splice(id, 1);\n\n        if (this._algorythms.length === 0) {\n            \n            this._state = \"STOPPED\";\n        }\n    }\n\n    public get demoSpeed(): number {\n\n        return this._demoSpeed;\n    }\n\n    public changeDemoSpeed(newSpeed: number): void {\n\n        if (newSpeed > config.minSpeed && newSpeed < config.maxSpeed) {\n\n            this._demoSpeed = newSpeed;\n\n            clearInterval(this._stepTimerId);\n\n            this._stepTimerId = setInterval(this.executeStep, config.stepInterval / this._demoSpeed);\n        }\n    }\n    \n    public onStepExecuted(handler: () => void): void {\n\n        this._eventEmitter.on(STEP_EXECUTED_EVENT, handler);\n    }\n\n    public onInputUpdated(handler: () => void): void {\n\n        this._input.onInputUpdated(handler);\n    }\n\n    private onInputUpdatedHandler(): void {\n\n        this._algorythms = this._algorythms.map(i => i.copyWithArray(this._input.array));\n    }\n\n    private executeStep(): void {\n\n        if (this._state === \"PLAYING\") {\n\n            const unfinished = this._algorythms.filter(a => !a.isFinished);\n\n            if (unfinished.length === 0) {\n\n                this.stop();\n            }\n\n            unfinished.forEach((algo: ISortAlgorythm<number>) => {\n\n                if (!algo.isFinished) {\n\n                    algo.executeStep();\n                }\n            });\n\n            this._eventEmitter.emit(STEP_EXECUTED_EVENT);\n        }\n    }\n\n    public dispose(): void {\n\n        clearInterval(this._stepTimerId);\n        this._eventEmitter.clear();\n        this._input.dispose();\n    }\n}\n","import { SortingDemoModel } from \"./sorting/SortingDemoModel\";\n\nexport class AppModel {\n\n    private readonly _sorting: SortingDemoModel;\n\n    constructor() {\n\n        this._sorting = new SortingDemoModel();\n    }\n\n    public get sorting(): SortingDemoModel {\n\n        return this._sorting;\n    } \n} \n","import React from 'react';\nimport 'react-dom';\nimport './App.css';\nimport { AppTheme } from './view/AppTheme';\nimport { initializeIcons } from '@fluentui/react/lib/Icons';\nimport { SortingDemoView } from './view/sorting/Demo';\nimport { loadTheme } from '@fluentui/react';\nimport { AppModel } from \"./model/AppModel\";\n\nexport const App = () => {\n\n\tinitializeIcons();\n\tloadTheme(AppTheme);\n\n\tconst model = new AppModel();\n\n\treturn (\n\t\t<div className=\"App\">\n\t\t\t<SortingDemoView model={model.sorting} />\n\t\t</div>\n\t);\n}\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport { App } from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}