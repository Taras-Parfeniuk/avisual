{"version":3,"sources":["view/AppTheme.ts","model/AlgorythmStepEventStore.ts","model/sorting/EventBasedSortAlgorythm.ts","model/sorting/bubble/BubbleSort.ts","model/sorting/bubble/BubbleSortAlgorythmFactory.ts","model/sorting/merge/MergeSort.ts","model/sorting/merge/MergeSortAlgorythmFactory.ts","model/sorting/quick/QuickSort.ts","model/sorting/quick/QuickSortAlgorythmFactory.ts","view/sorting/ArrayItem.tsx","view/sorting/Array.tsx","view/sorting/Algorythm.tsx","view/sorting/ArraySettings.tsx","view/sorting/Demo.tsx","App.tsx","reportWebVitals.js","index.js"],"names":["AppTheme","createTheme","palette","themePrimary","themeLighterAlt","themeLighter","themeLight","themeTertiary","themeSecondary","themeDarkAlt","themeDark","themeDarker","neutralLighterAlt","neutralLighter","neutralLight","neutralQuaternaryAlt","neutralQuaternary","neutralTertiaryAlt","neutralTertiary","neutralSecondary","neutralPrimaryAlt","neutralPrimary","neutralDark","black","white","AlgorythmStepEventStore","_stepEventName","_stepEvent","Event","listener","this","addEventListenerOnce","type","target","addEventListener","fn","event","removeEventListener","dispatchEvent","EventTarget","EventBasedSortAlgorythm","array","compare","info","_stepEventStore","_info","_isFinished","_operationNumber","_selection","_array","_compare","algorythm","finally","dispatchStepEvent","indexes","promise","Promise","resolve","reject","onNextStep","BubbleSort","name","link","bubbleSort","length","i","j","setSelection","waitForNextStep","BubbleSortAlgorythmFactory","MergeSort","mergeSort","from","to","middle","Math","floor","highlightRange","merge","leftArray","rightArray","push","item","pickItem","shift","selection","MergeSortAlgorythmFactory","QuickSort","quickSort","bind","partition","low","high","pi","pivot","QuickSortAlgorythmFactory","ArrayItem","height","isHighlighted","isNegative","classNames","className","join","style","Array","max","min","maxHeight","abs","map","idx","isSelected","includes","key","AlgorythmView","props","viewId","closeView","isRunning","operationsCount","isFinished","items","text","href","iconProps","iconName","farItems","onClick","iconOnly","operationsCountString","CommandBar","ProgressIndicator","progressHidden","Label","Icon","ArraySettings","updateArray","regenerateArray","state","arraySize","defaultArraySize","createArray","enabled","Slider","showValue","label","defaultValue","value","onChange","disabled","CommandBarButton","size","val","random","newSize","setState","React","Component","SortingDemoView","_availableAlgorythms","_stepTimerId","demoState","algorythms","sourceArray","addAlgorythm","executeStep","pause","play","stop","removeAlgorythm","updateSourceArray","changeDemoSpeed","a","b","setInterval","STEP_INTERVAL","clearInterval","addAlgorythmMenuProps","algorythmName","create","demoControls","menuProps","canUpdateSourceArray","currentSelection","currentOperationNumber","stateUpdate","copyWithArray","algo","concat","id","splice","newArray","newSpeed","unfinished","filter","forEach","App","initializeIcons","loadTheme","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.1d12670f.chunk.js","sourcesContent":["import { createTheme } from \"@fluentui/react\";\r\n\r\nexport const AppTheme = createTheme({\r\n    palette: {\r\n      themePrimary: '#9a93c7',\r\n      themeLighterAlt: '#fafafd',\r\n      themeLighter: '#edecf6',\r\n      themeLight: '#dedcee',\r\n      themeTertiary: '#bfbbdd',\r\n      themeSecondary: '#a59fce',\r\n      themeDarkAlt: '#8b84b3',\r\n      themeDark: '#757097',\r\n      themeDarker: '#56526f',\r\n      neutralLighterAlt: '#faf9f8',\r\n      neutralLighter: '#f3f2f1',\r\n      neutralLight: '#edebe9',\r\n      neutralQuaternaryAlt: '#e1dfdd',\r\n      neutralQuaternary: '#d0d0d0',\r\n      neutralTertiaryAlt: '#c8c6c4',\r\n      neutralTertiary: '#a19f9d',\r\n      neutralSecondary: '#605e5c',\r\n      neutralPrimaryAlt: '#3b3a39',\r\n      neutralPrimary: '#323130',\r\n      neutralDark: '#201f1e',\r\n      black: '#000000',\r\n      white: '#ffffff',\r\n    }});","export class AlgorythmStepEventStore extends EventTarget {\r\n\r\n    private readonly _stepEventName: string;\r\n    private readonly _stepEvent: Event;\r\n\r\n    constructor() {\r\n       \r\n        super();\r\n\r\n        this._stepEventName = \"stepInitiated\";\r\n        this._stepEvent = new Event(this._stepEventName);\r\n    }\r\n    \r\n    public onNextStep(listener: EventListener): void {\r\n\r\n        this.addEventListenerOnce(this._stepEventName, listener);\r\n    }\r\n\r\n    private addEventListenerOnce(type: string, listener: EventListener) {\r\n        const target = this;\r\n\r\n        target.addEventListener(type, function fn(event) {\r\n            \r\n            target.removeEventListener(type, fn);\r\n            listener(event);\r\n        });\r\n    }\r\n\r\n    public dispatchStepEvent() {\r\n\r\n        this.dispatchEvent(this._stepEvent);\r\n    }\r\n}","import { AlgorythmInfo } from \"../AlgorythmInfo\";\r\nimport { AlgorythmStepEventStore } from \"../AlgorythmStepEventStore\";\r\nimport { ISortAlgorythm } from \"./ISortAlgorythm\";\r\n\r\nexport abstract class EventBasedSortAlgorythm<T> implements ISortAlgorythm<T> {\r\n\r\n    private readonly _stepEventStore: AlgorythmStepEventStore;\r\n    private readonly _info: AlgorythmInfo;\r\n\r\n    private _isFinished: boolean;\r\n    private _operationNumber: number;\r\n    private _selection: number[];\r\n\r\n    protected readonly _array: T[];\r\n    protected readonly _compare: (a: T, b: T) => number;\r\n    \r\n    constructor(array: T[], compare: (a: T, b: T) => number, info: AlgorythmInfo) {\r\n\r\n        this._array = [...array];\r\n        this._compare = compare;\r\n        this._stepEventStore = new AlgorythmStepEventStore();\r\n        this._isFinished = false;\r\n        this._operationNumber = 0;\r\n        this._selection = [];\r\n        this._info = info;\r\n\r\n        this.algorythm()\r\n            .finally(() => { this._isFinished = true; })\r\n    }\r\n    \r\n    \r\n    public abstract copyWithArray(array: T[]): ISortAlgorythm<T>;\r\n    protected abstract algorythm(): Promise<void>;\r\n\r\n    public get info(): AlgorythmInfo {\r\n\r\n        return this._info;\r\n    }\r\n\r\n    public get array(): T[] {\r\n\r\n        return this._array;\r\n    }\r\n    \r\n    public get currentSelection(): number[] {\r\n\r\n        return this._selection;\r\n    }\r\n\r\n    public get isFinished(): boolean {\r\n\r\n        return this._isFinished;\r\n    }\r\n    \r\n    public get currentOperationNumber(): number {\r\n\r\n        return this._operationNumber;\r\n    }\r\n\r\n    public executeStep(): void {\r\n        \r\n        this._stepEventStore.dispatchStepEvent();\r\n        this._operationNumber++;\r\n    }\r\n\r\n    protected setSelection(indexes: number[]): void {\r\n\r\n        this._selection = indexes;\r\n    }\r\n\r\n    protected async waitForNextStep(): Promise<void> {\r\n\r\n        const promise = new Promise<void>((resolve, reject) => {\r\n\r\n            this._stepEventStore.onNextStep(() => resolve());\r\n        });\r\n\r\n        return promise;\r\n    }\r\n}\r\n","import { ISortAlgorythm } from '../ISortAlgorythm';\r\nimport { EventBasedSortAlgorythm } from '../EventBasedSortAlgorythm';\r\n\r\nexport class BubbleSort<T> extends EventBasedSortAlgorythm<T> implements ISortAlgorythm<T> {\r\n\r\n    constructor(array: T[], compare: (a: T, b: T) => number) {\r\n\r\n         super(array, compare, { name: \"bubble sort\", link: \"https://en.wikipedia.org/wiki/Bubble_sort\" });\r\n    }\r\n\r\n    protected algorythm(): Promise<void> {\r\n        \r\n        return this.bubbleSort();\r\n    }\r\n\r\n    private async bubbleSort(): Promise<void> {\r\n\r\n        if (this._array.length < 2) {\r\n\r\n            return;\r\n        }\r\n\r\n        for (let i = this._array.length; i >= 0; i--) {\r\n\r\n            for (let j = 1; j < i; j++) {\r\n\r\n                this.setSelection([ j, j - 1 ]);\r\n\r\n                await this.waitForNextStep();\r\n\r\n                if (this._compare(this._array[j - 1], this._array[j]) > 0) {\r\n\r\n                    await this.waitForNextStep();\r\n\r\n                    [ this._array[j - 1], this._array[j] ] = [ this._array[j], this._array[j - 1] ];\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    public copyWithArray(array: T[]): ISortAlgorythm<T> {\r\n\r\n        return new BubbleSort<T>(array, this._compare);\r\n    }\r\n}","import { ISortAlgorythm, ISortAlgorythmFactory } from \"../ISortAlgorythm\";\r\nimport { BubbleSort } from \"./BubbleSort\";\r\n\r\nexport class BubbleSortAlgorythmFactory<T> implements ISortAlgorythmFactory<T> {\r\n    \r\n    private readonly _compare: (a: T, b: T) => number;\r\n\r\n    constructor(compare: (a: T, b: T) => number) {\r\n\r\n        this._compare = compare;\r\n    }\r\n\r\n    public get algorythmName(): string {\r\n\r\n        return \"bubble sort\";\r\n    }\r\n    \r\n    create(array: T[]): ISortAlgorythm<T> {\r\n\r\n        return new BubbleSort(array, this._compare);\r\n    }\r\n}","import { EventBasedSortAlgorythm } from \"../EventBasedSortAlgorythm\";\r\nimport { ISortAlgorythm } from \"../ISortAlgorythm\";\r\n\r\nexport class MergeSort<T> extends EventBasedSortAlgorythm<T> implements ISortAlgorythm<T> {\r\n\r\n    constructor(array: T[], compare: (a: T, b: T) => number) {\r\n        \r\n        super(array, compare, { name: \"merge sort\", link: \"https://en.wikipedia.org/wiki/Merge_sort\" });\r\n    }\r\n\r\n    public copyWithArray(array: T[]): ISortAlgorythm<T> {\r\n\r\n        return new MergeSort<T>(array, this._compare);\r\n    }\r\n\r\n    protected algorythm(): Promise<void> {\r\n\r\n        return this.mergeSort(0, this._array.length - 1);\r\n    }\r\n\r\n    private async mergeSort(from: number, to: number): Promise<void> {\r\n\r\n        if (from < to) {\r\n\r\n            await this.waitForNextStep();\r\n            const middle = Math.floor(from + (to - from) / 2);\r\n            this.setSelection([ middle ]);\r\n            \r\n            this.highlightRange(from, middle);\r\n            await this.waitForNextStep();\r\n            await this.mergeSort(from, middle);\r\n            \r\n            this.highlightRange(middle + 1, to);\r\n            await this.waitForNextStep();\r\n            await this.mergeSort(middle + 1, to);\r\n\r\n            this.highlightRange(from, to);\r\n            await this.waitForNextStep();\r\n            await this.merge(from, middle, to);\r\n        }\r\n    }\r\n\r\n    private async merge(from: number, middle: number, to: number): Promise<void> {\r\n\r\n        const leftArray: T[] = [];\r\n        const rightArray: T[] = [];\r\n\r\n        for (let i = from; i <= to; i++) {\r\n\r\n            await this.waitForNextStep();\r\n\r\n            if (i > middle) {\r\n            \r\n                await this.waitForNextStep();\r\n                rightArray.push(this._array[i]);\r\n            } \r\n            else {\r\n\r\n                await this.waitForNextStep();\r\n                leftArray.push(this._array[i]);\r\n            }\r\n        }\r\n\r\n        let i = from;\r\n        await this.waitForNextStep();\r\n        while (leftArray.length > 0 || rightArray.length > 0) {\r\n\r\n            await this.waitForNextStep();\r\n            const item = this.pickItem(leftArray, rightArray);\r\n                \r\n            if (!!item) {\r\n\r\n                this._array[i] = item;\r\n            }\r\n\r\n            await this.waitForNextStep();\r\n            i++;\r\n        }\r\n    }\r\n\r\n    private pickItem(leftArray: T[], rightArray: T[]): T | undefined {\r\n\r\n        if (leftArray.length > 0 && rightArray.length > 0) {\r\n\r\n            return this._compare(leftArray[0], rightArray[0]) <= 0\r\n                ? leftArray.shift()\r\n                : rightArray.shift();\r\n        }\r\n\r\n        if (leftArray.length < 1) {\r\n\r\n            return rightArray.shift();\r\n        }\r\n\r\n        return leftArray.shift();\r\n    }\r\n\r\n    private highlightRange(from: number, to: number): void {\r\n\r\n        const selection = [];\r\n\r\n        for (let i = from; i <= to; i++) {\r\n\r\n            selection.push(i);\r\n        }\r\n\r\n        this.setSelection(selection);\r\n    }\r\n}","import { ISortAlgorythm, ISortAlgorythmFactory } from \"../ISortAlgorythm\";\r\nimport { MergeSort } from \"./MergeSort\";\r\n\r\nexport class MergeSortAlgorythmFactory<T> implements ISortAlgorythmFactory<T> {\r\n    \r\n    private readonly _compare: (a: T, b: T) => number;\r\n\r\n    constructor(compare: (a: T, b: T) => number) {\r\n\r\n        this._compare = compare;\r\n    }\r\n\r\n    public get algorythmName(): string {\r\n\r\n        return \"merge sort\";\r\n    }\r\n    \r\n    create(array: T[]): ISortAlgorythm<T> {\r\n\r\n        return new MergeSort(array, this._compare);\r\n    }\r\n}","import { EventBasedSortAlgorythm } from \"../EventBasedSortAlgorythm\";\r\nimport { ISortAlgorythm } from \"../ISortAlgorythm\";\r\n\r\nexport class QuickSort<T> extends EventBasedSortAlgorythm<T> implements ISortAlgorythm<T> {\r\n    \r\n    constructor(array: T[], compare: (a: T, b: T) => number) {\r\n        \r\n        super(array, compare, { name: \"quick sort\", link: \"https://en.wikipedia.org/wiki/Quick_sort\" });\r\n\r\n        this.quickSort = this.quickSort.bind(this);\r\n        this.partition = this.partition.bind(this);\r\n    }\r\n\r\n    public copyWithArray(array: T[]): ISortAlgorythm<T> {\r\n        \r\n        return new QuickSort(array, this._compare);\r\n    }\r\n\r\n    protected algorythm(): Promise<void> {\r\n        \r\n        return this.quickSort(0, this._array.length - 1);\r\n    }\r\n\r\n    private async quickSort(low: number, high: number): Promise<void> {\r\n\r\n        if (low < high) \r\n        { \r\n            await this.waitForNextStep();\r\n\r\n            const pi = await this.partition(low, high); \r\n            \r\n            await this.waitForNextStep();\r\n            \r\n            await this.quickSort(low, pi - 1); \r\n            \r\n            await this.waitForNextStep();\r\n            \r\n            await this.quickSort(pi + 1, high); \r\n        }  \r\n    }\r\n\r\n    private async partition(low: number, high: number): Promise<number> { \r\n\r\n        const pivot = this._array[high];  \r\n\r\n        this.setSelection([ high ]);\r\n\r\n        await this.waitForNextStep();\r\n\r\n        let i = (low - 1);  \r\n\r\n        await this.waitForNextStep();\r\n\r\n        for (let j = low; j < high; j++) { \r\n  \r\n            this.setSelection([ high, j, i ]);\r\n\r\n            await this.waitForNextStep();\r\n\r\n            if (this._array[j] < pivot) { \r\n\r\n                await this.waitForNextStep();\r\n\r\n                i++; \r\n\r\n                await this.waitForNextStep();\r\n\r\n                [ this._array[i], this._array[j] ] = [ this._array[j], this._array[i] ];\r\n            } \r\n        } \r\n\r\n        await this.waitForNextStep();\r\n\r\n        this.setSelection([ high, i + 1 ]);\r\n        [ this._array[i + 1], this._array[high] ] = [ this._array[high], this._array[i + 1] ];\r\n\r\n        await this.waitForNextStep();\r\n\r\n        return i + 1; \r\n    } \r\n}\r\n","import { ISortAlgorythm, ISortAlgorythmFactory } from \"../ISortAlgorythm\";\r\nimport { QuickSort } from \"./QuickSort\";\r\n\r\nexport class QuickSortAlgorythmFactory<T> implements ISortAlgorythmFactory<T> {\r\n    \r\n    private readonly _compare: (a: T, b: T) => number;\r\n\r\n    constructor(compare: (a: T, b: T) => number) {\r\n\r\n        this._compare = compare;\r\n    }\r\n\r\n    public get algorythmName(): string {\r\n\r\n        return \"quick sort\";\r\n    }\r\n    \r\n    create(array: T[]): ISortAlgorythm<T> {\r\n\r\n        return new QuickSort(array, this._compare);\r\n    }\r\n}","import React from \"react\";\r\n\r\nexport type ArrayItemParams = { height: number, isHighlighted: boolean, isNegative: boolean }\r\n\r\nexport const ArrayItem = ({ height = 100, isHighlighted = false, isNegative = false }: ArrayItemParams) => {\r\n\r\n    const classNames = [ 'item' ];\r\n\r\n    if (isNegative) {\r\n\r\n        classNames.push('item-negative')\r\n    } else {\r\n\r\n        classNames.push('item-positive')\r\n    }\r\n\r\n    if (isHighlighted) {\r\n\r\n        classNames.push('highlighted');\r\n    }\r\n\r\n    return (\r\n        <div className={classNames.join(' ')} style={{ height: `${height}%` }}>\r\n            <div />\r\n            <div />\r\n        </div>\r\n    );\r\n}","import React from \"react\";\r\nimport { ArrayItem } from \"./ArrayItem\";\r\nimport './Array.css'\r\n\r\ntype ArrayProps = { array: number[], selection: number[] };\r\n\r\nexport const Array = ({ array = [], selection = [] }: ArrayProps) => {\r\n\r\n    const max = Math.max(...array);\r\n    const min = Math.min(...array);\r\n\r\n    const maxHeight = Math.max(Math.abs(max), Math.abs(min));\r\n\r\n    return (\r\n        <div className='array-container'>\r\n            {\r\n                array.map((item, idx) => {\r\n                    \r\n                    const height = 100 * Math.abs(item) / maxHeight;\r\n                    const isNegative = item < 0;\r\n                    const isSelected = selection.includes(idx);\r\n\r\n                    return (\r\n                        <ArrayItem \r\n                            key={`array-item-${idx}`}\r\n                            height={height} \r\n                            isNegative={isNegative} \r\n                            isHighlighted={isSelected} \r\n                        />\r\n                    );\r\n                })\r\n            }\r\n        </div>\r\n    )\r\n}\r\n","import { CommandBar, ICommandBarItemProps, Icon, Label, ProgressIndicator } from \"@fluentui/react\";\r\nimport React from \"react\";\r\nimport { AlgorythmInfo } from \"../../model/AlgorythmInfo\";\r\nimport { Array } from \"./Array\";\r\nimport './Algorythm.css';\r\n\r\ntype AlgoViewProps = { \r\n    viewId: number,\r\n    closeView: (viewId: number) => void,\r\n    array: number[],\r\n    selection: number[],\r\n    isFinished: boolean,\r\n    isRunning: boolean,\r\n    operationsCount: number,\r\n    info: AlgorythmInfo\r\n};\r\n\r\nexport const AlgorythmView = (props: AlgoViewProps) => {\r\n\r\n    const { \r\n        array, \r\n        selection, \r\n        viewId, \r\n        closeView, \r\n        isRunning, \r\n        operationsCount, \r\n        isFinished, \r\n        info \r\n    } = props;\r\n\r\n    const items: ICommandBarItemProps[] = [\r\n        {\r\n            key: 'algoTitle',\r\n            text: info.name,\r\n            href: info.link,\r\n            iconProps: { iconName: 'Info' }\r\n        }\r\n    ];\r\n\r\n    const farItems: ICommandBarItemProps[] = [\r\n        {\r\n            key: 'closeBtn',\r\n            onClick: () => closeView(viewId),\r\n            iconProps: {\r\n                iconName: 'ChromeClose'\r\n            },\r\n            iconOnly: true\r\n        }\r\n    ]\r\n\r\n    const operationsCountString = operationsCount > 0\r\n        ? `~${operationsCount}`\r\n        : operationsCount;\r\n\r\n    return (\r\n        <div className='algorythm'>\r\n            <CommandBar items={items} farItems={farItems} />\r\n            <Array array={array} selection={selection} />\r\n            <ProgressIndicator progressHidden={!isRunning} />\r\n            <Label>Items: {array.length} | Operations: {operationsCountString}</Label>\r\n            {\r\n                isFinished && (\r\n                    <Icon iconName='CheckMark' />\r\n                )\r\n            }\r\n        </div>\r\n    );\r\n} \r\n","import { CommandBar, CommandBarButton, ICommandBarItemProps, Label, Slider } from \"@fluentui/react\";\r\nimport React from \"react\";\r\nimport './ArraySettings.css';\r\nimport { Array } from \"./Array\";\r\n \r\ntype ArraySettingsProps = { \r\n    enabled: boolean,\r\n    defaultArraySize: number, \r\n    updateArray: (newArray: number[]) => void \r\n};\r\n\r\ntype ArraySettingsState = { \r\n    array: number[],\r\n    arraySize: number\r\n};\r\n\r\nexport class ArraySettings extends React.Component<ArraySettingsProps, ArraySettingsState> {\r\n    \r\n    constructor(props: ArraySettingsProps) {\r\n\r\n        super(props);\r\n\r\n        this.updateArray = this.updateArray.bind(this);\r\n        this.regenerateArray = this.regenerateArray.bind(this);\r\n\r\n        this.state = { \r\n            arraySize: props.defaultArraySize, \r\n            array: this.createArray(props.defaultArraySize) \r\n        };\r\n\r\n        props.updateArray(this.state.array);\r\n    }\r\n\r\n    render() {\r\n\r\n        const { defaultArraySize = 10, enabled } = this.props;\r\n        const { array, arraySize } = this.state;\r\n\r\n        return (\r\n            <div className='array-settings-toolbar'>\r\n                <Slider \r\n                    showValue \r\n                    label='Array size' \r\n                    min={2} \r\n                    max={250} \r\n                    defaultValue={defaultArraySize} \r\n                    value={arraySize}\r\n                    onChange={this.updateArray}\r\n                    disabled={!enabled}\r\n                />\r\n                <Array array={array} selection={[]} />\r\n                <CommandBarButton \r\n                    iconProps={{ iconName:\"Refresh\" }} \r\n                    onClick={this.regenerateArray} \r\n                    disabled={!enabled} \r\n                />\r\n            </div>\r\n        );\r\n    }\r\n\r\n    private createArray(size: number): number[] {\r\n\r\n        const array = [];\r\n\r\n        for (let i = 0; i < size; i++) {\r\n\r\n            const min = -10;\r\n            const max = 10;\r\n            const val = Math.floor(Math.random() * (max - min + 1)) + min;\r\n\r\n            array.push(val);\r\n        }\r\n\r\n        return array;\r\n    }\r\n\r\n    private updateArray(newSize: number): void {\r\n\r\n        const { updateArray } = this.props;\r\n\r\n        const array = this.createArray(newSize);\r\n\r\n        this.setState({ arraySize: newSize, array });\r\n\r\n        updateArray(array);\r\n    }\r\n\r\n    private regenerateArray(): void {\r\n\r\n        const { updateArray } = this.props;\r\n        const { arraySize } = this.state;\r\n\r\n        const array = this.createArray(arraySize);\r\n\r\n        this.setState({ array });\r\n\r\n        updateArray(array);\r\n    }\r\n}\r\n","import { CommandBar, CommandBarButton, ICommandBarItemProps, Slider } from \"@fluentui/react\";\r\nimport React from \"react\";\r\nimport { BubbleSort } from \"../../model/sorting/bubble/BubbleSort\";\r\nimport { BubbleSortAlgorythmFactory } from \"../../model/sorting/bubble/BubbleSortAlgorythmFactory\";\r\nimport { ISortAlgorythm, ISortAlgorythmFactory } from \"../../model/sorting/ISortAlgorythm\";\r\nimport { MergeSort } from \"../../model/sorting/merge/MergeSort\";\r\nimport { MergeSortAlgorythmFactory } from \"../../model/sorting/merge/MergeSortAlgorythmFactory\";\r\nimport { QuickSort } from \"../../model/sorting/quick/QuickSort\";\r\nimport { QuickSortAlgorythmFactory } from \"../../model/sorting/quick/QuickSortAlgorythmFactory\";\r\nimport { AlgorythmView } from \"./Algorythm\";\r\nimport { ArraySettings } from \"./ArraySettings\";\r\nimport './Demo.css';\r\n\r\ntype DemoState = \"PLAYING\" | \"PAUSED\" | \"STOPPED\";\r\n\r\nconst STEP_INTERVAL = 500;\r\nconst DEFAULT_ARRAY_SIZE = 10;\r\nconst DEFAULT_DEMO_SPEED = 10;\r\n\r\ntype SortingDemoViewState = {\r\n    demoState?: DemoState,\r\n    sourceArray?: number[],\r\n    algorythms?: ISortAlgorythm<number>[]\r\n}\r\n\r\nexport class SortingDemoView extends React.Component<{}, SortingDemoViewState> {\r\n\r\n    private readonly _availableAlgorythms: ISortAlgorythmFactory<number>[];\r\n\r\n    private _stepTimerId: any;\r\n\r\n    constructor(props: {}) {\r\n\r\n        super(props);\r\n\r\n        this.state = {\r\n            demoState: \"STOPPED\",\r\n            algorythms: [],\r\n            sourceArray: []\r\n        };\r\n\r\n        this.addAlgorythm = this.addAlgorythm.bind(this);\r\n        this.executeStep = this.executeStep.bind(this);\r\n        this.pause = this.pause.bind(this);\r\n        this.play = this.play.bind(this);\r\n        this.stop = this.stop.bind(this);\r\n        this.removeAlgorythm = this.removeAlgorythm.bind(this);\r\n        this.updateSourceArray = this.updateSourceArray.bind(this);\r\n        this.changeDemoSpeed = this.changeDemoSpeed.bind(this);\r\n\r\n        this._availableAlgorythms = [\r\n            new BubbleSortAlgorythmFactory((a, b) => a - b),\r\n            new MergeSortAlgorythmFactory((a, b) => a - b),\r\n            new QuickSortAlgorythmFactory((a, b) => a - b)\r\n        ];\r\n    }\r\n\r\n    componentDidMount() {\r\n\r\n        this._stepTimerId = setInterval(this.executeStep, STEP_INTERVAL / DEFAULT_DEMO_SPEED);\r\n    }\r\n\r\n    componentWillUnmount() {\r\n\r\n        clearInterval(this._stepTimerId);\r\n    }\r\n\r\n    render() {\r\n\r\n        const { demoState, algorythms = [], sourceArray = [] } = this.state;\r\n\r\n        const addAlgorythmMenuProps = {\r\n            items: this._availableAlgorythms.map(i => ({\r\n                key: `add-algo_${i.algorythmName}`,\r\n                text: i.algorythmName,\r\n                onClick: () => this.addAlgorythm(i.create(sourceArray))\r\n            }))\r\n        };\r\n\r\n        const demoControls: ICommandBarItemProps[] = [\r\n            {\r\n                key: 'playDemo',\r\n                iconProps: { iconName: 'Play' },\r\n                disabled: demoState === \"PLAYING\" || algorythms.length === 0,\r\n                iconOnly: true,\r\n                onClick: this.play\r\n            },\r\n            {\r\n                key: 'pauseDemo',\r\n                iconProps: { iconName: 'Pause' },\r\n                disabled: demoState === \"PAUSED\" || demoState === \"STOPPED\",\r\n                iconOnly: true,\r\n                onClick: this.pause\r\n            },\r\n            {\r\n                key: 'stopDemo',\r\n                iconProps: { iconName: 'Stop' },\r\n                disabled: demoState === \"STOPPED\",\r\n                iconOnly: true,\r\n                onClick: this.stop\r\n            }\r\n        ];\r\n\r\n        return (\r\n            <div className='demo-view'>\r\n                <div className='demo-settings-toolbar'>\r\n                    <CommandBarButton text='Add algorythm'\r\n                        iconProps={{ iconName: 'Add' }}\r\n                        disabled={demoState === \"PLAYING\" || demoState === \"PAUSED\"}\r\n                        menuProps={addAlgorythmMenuProps} />\r\n                    <CommandBar items={demoControls} />\r\n                    <Slider \r\n                        showValue \r\n                        label='Demo speed' \r\n                        min={1} \r\n                        max={100} \r\n                        defaultValue={DEFAULT_DEMO_SPEED} \r\n                        onChange={this.changeDemoSpeed}\r\n                    />\r\n                </div>\r\n                <ArraySettings\r\n                    enabled={this.canUpdateSourceArray}\r\n                    defaultArraySize={DEFAULT_ARRAY_SIZE}\r\n                    updateArray={this.updateSourceArray}\r\n                />\r\n                <div className='algorythms-container'>\r\n                {\r\n                    algorythms.map((i, idx) => {\r\n                        \r\n                        const isRunning = demoState === \"PLAYING\" && !i.isFinished;\r\n\r\n                        return (\r\n                            <AlgorythmView\r\n                                viewId={idx}\r\n                                array={i.array}\r\n                                selection={i.currentSelection}\r\n                                isRunning={isRunning}\r\n                                isFinished={i.isFinished}\r\n                                closeView={this.removeAlgorythm}\r\n                                operationsCount={i.currentOperationNumber}\r\n                                info={i.info}\r\n                            />\r\n                        );\r\n                    })\r\n                }\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n\r\n    private get canUpdateSourceArray(): boolean {\r\n\r\n        return this.state.demoState === \"STOPPED\";\r\n    }\r\n\r\n    private play(): void {\r\n\r\n        const { demoState, sourceArray = [], algorythms = [] } = this.state;\r\n\r\n        if (demoState === \"PAUSED\") {\r\n\r\n            this.setState({ demoState: \"PLAYING\" })\r\n        }\r\n\r\n        if (demoState === \"STOPPED\") {\r\n\r\n            const stateUpdate: SortingDemoViewState = { \r\n                demoState: \"PLAYING\",\r\n                algorythms: algorythms.map(i => i.copyWithArray(sourceArray)),\r\n            };\r\n\r\n            this.setState(stateUpdate)\r\n        }\r\n    }\r\n\r\n    private pause(): void {\r\n\r\n        if (this.state.demoState === \"PLAYING\") {\r\n\r\n            this.setState({ demoState: \"PAUSED\" })\r\n        }\r\n    }\r\n\r\n    private stop(): void {\r\n\r\n        const { demoState } = this.state;\r\n\r\n        if (demoState === \"PLAYING\" || demoState === \"PAUSED\") {\r\n\r\n            const stateUpdate: SortingDemoViewState = {\r\n                demoState: \"STOPPED\"\r\n            };\r\n\r\n            this.setState(stateUpdate);\r\n        }\r\n    }\r\n\r\n    private addAlgorythm(algo: ISortAlgorythm<number>): void {\r\n\r\n        const { algorythms = [] } = this.state;\r\n\r\n        const stateUpdate: SortingDemoViewState = {\r\n            algorythms: algorythms.concat(algo)\r\n        }\r\n\r\n        this.setState(stateUpdate);\r\n    }\r\n\r\n    private removeAlgorythm(id: number): void {\r\n\r\n        const { algorythms = [] } = this.state;\r\n        \r\n        algorythms.splice(id, 1);\r\n        \r\n        const stateUpdate: SortingDemoViewState = {\r\n            algorythms\r\n        }\r\n\r\n        if (algorythms.length === 0) {\r\n            stateUpdate.demoState = \"STOPPED\";\r\n        }\r\n\r\n        this.setState(stateUpdate);\r\n    }\r\n\r\n    private updateSourceArray(newArray: number[]) {\r\n\r\n        if (this.canUpdateSourceArray) {\r\n            \r\n            const { algorythms = [] } = this.state;\r\n\r\n            const stateUpdate: SortingDemoViewState = {\r\n                sourceArray: newArray,\r\n                algorythms: algorythms.map(i => i.copyWithArray(newArray))\r\n            }\r\n    \r\n            this.setState(stateUpdate);\r\n        }\r\n    }\r\n\r\n    private changeDemoSpeed(newSpeed: number): void {\r\n\r\n        clearInterval(this._stepTimerId);\r\n\r\n        this._stepTimerId = setInterval(this.executeStep, STEP_INTERVAL / newSpeed);\r\n    }\r\n\r\n    private executeStep(): void {\r\n\r\n        if (this.state.demoState === \"PLAYING\") {\r\n\r\n            const { algorythms = [] } = this.state;\r\n\r\n            const unfinished = algorythms.filter(a => !a.isFinished);\r\n\r\n            if (unfinished.length === 0) {\r\n\r\n                this.stop();\r\n\r\n                return;\r\n            }\r\n\r\n            unfinished.forEach((algo: ISortAlgorythm<number>) => {\r\n\r\n                if (!algo.isFinished) {\r\n\r\n                    algo.executeStep();\r\n                }\r\n            });\r\n\r\n            this.setState({ algorythms })\r\n        }\r\n    }\r\n}\r\n","import React from 'react';\nimport 'react-dom';\nimport './App.css';\nimport { AppTheme } from './view/AppTheme';\nimport { initializeIcons } from '@fluentui/react/lib/Icons';\nimport { SortingDemoView } from './view/sorting/Demo';\nimport { loadTheme } from '@fluentui/react';\n\nexport const App = () => {\n\n\tinitializeIcons();\n\tloadTheme(AppTheme);\n\n\treturn (\n\t\t<div className=\"App\">\n\t\t\t<SortingDemoView />\n\t\t</div>\n\t);\n}\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport { App } from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}